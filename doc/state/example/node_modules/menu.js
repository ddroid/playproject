const STATE = require('../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module)

function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      btn: {
        $: ''
      },
    }
  }
  function fallback_instance () {
    return {
      _: {
        btn: {
          0: ''
        },
        'btn$small': {
          0: ''
        },
      },
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              .title{
                background: linear-gradient(currentColor 0 0) 0 100% / var(--underline-width, 0) .1em no-repeat;
                transition: color .5s ease, background-size .5s;
                cursor: pointer;
              }
              .title:hover{
                --underline-width: 100%
              }
              ul{
                background: #273d3d;
                list-style: none;
                display: none;
                position: absolute;
                padding: 10px;
                box-shadow: 0px 1px 6px 1px gray;
                border-radius: 5px;
              }
              ul.active{
                display: block;
              }
            `
          }
        },
        'lang/': {
          'en-us.json': {
            raw: {
              title: 'menu',
              links: ['link1', 'link2'],
            }
          },
        },
      }
    }
  }
}

/******************************************************************************
  MENU
******************************************************************************/
delete require.cache[require.resolve('btn')]
const {btn, btn_small} = require('btn')


module.exports = {menu, menu_hover}
async function menu(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts.sid) // hub is "parent's" io "id" to send/receive messages
  const admin = sdb.req_access(opts.sid)
  const on = {
    style: inject,
    lang: fill
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <div tabindex='0' class='title'></div>
    <ul>
    </ul>
    <style></style>`
  const main = shadow.querySelector('ul')
  const title = shadow.querySelector('.title')
  const style = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // EVENT LISTENERS
  // ----------------------------------------
  title.onclick = () => {
    main.classList.toggle('active')
    admin.register('theme', 'rainbow', {
      'page': {
        'style.css': {
          raw: `body { font-family: cursive; }`,
        }
      },
      'page/app/head/foo/nav:0': {
        'style.css': {
              raw: `
                nav{
                  display: flex;
                  gap: 20px;
                  padding: 20px;
                  background: #4b2d6d;
                  color: white;
                  box-shadow: 0px 1px 6px 1px gray;
                  margin: 5px;
                }
                .title{
                  background: linear-gradient(currentColor 0 0) 0 100% / var(--underline-width, 0) .1em no-repeat;
                  transition: color .5s ease, background-size .5s;
                  cursor: pointer;
                }
                .box{
                  display: flex;
                  gap: 20px;
                }
                .title:hover{
                  --underline-width: 100%
                }
              `
            }
      },
      
    })
  }
  title.onblur = () => {
    main.classList.remove('active')
  }
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { //btn
    main.append(await btn(subs[0]), await btn_small(subs[1]))
  }
  return el

  function onbatch(batch){
    for (const {type, data} of batch) {
      on[type] && on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    title.replaceChildren(data.title)
    main.replaceChildren(...data.links.map(link => {
      const el = document.createElement('li')
      el.innerHTML = link
      return el
    }))
  }
}
async function menu_hover(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts.sid) // hub is "parent's" io "id" to send/receive messages
  const on = {
    style: inject,
    lang: fill
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <div tabindex='0' class='title'></div>
    <ul>
    </ul>
    <style></style>`
  const main = shadow.querySelector('ul')
  const title = shadow.querySelector('.title')
  const style = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // EVENT LISTENERS
  // ----------------------------------------
  title.onmouseover = () => {
    main.classList.add('active')
  }
  title.onmouseout = () => {
    main.classList.remove('active')
  }
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { //btn
    main.append(await btn(subs[0]), await btn_small(subs[1]))
  }
  return el

  function onbatch(batch){
    for (const {type, data} of batch) {
      on[type] && on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    title.replaceChildren(data.title)
    main.replaceChildren(...data.links.map(link => {
      const el = document.createElement('li')
      el.innerHTML = link
      return el
    }))
  }
}
