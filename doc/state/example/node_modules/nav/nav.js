const STATE = require('../../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

/******************************************************************************
  NAV
******************************************************************************/
const {menu, menu_hover} = require('menu')
const {btn, btn_small} = require('btn')

module.exports = nav
async function nav(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts?.sid) // hub is "parent's" io "id" to send/receive messages
  const on = {
    theme: inject,
    lang: fill
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <nav>
      <div class="box">

      <div>
    </nav>
    <style></style>`
  const main = shadow.querySelector('nav')
  const div = shadow.querySelector('div')
  const style = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  console.log(subs)
  { //menu
    main.append(await menu(subs[0]), await menu(subs[1]), await menu(subs[2]), await menu_hover(subs[3]), await btn(subs[4]))
  }
  return el

  function onbatch(batch){
    for (const {type, data} of batch) {
      on[type] && on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    div.replaceChildren(...data.links.map(link => {
      const el = document.createElement('div')
      el.classList.add('title')
      el.innerHTML = link
      return el
    }))
  }
}


function fallback_module () { // -> set database defaults or load from database
	return {
    api: fallback_instance,
    _: { 'menu':{ $: ([menu]) => {
          const state = menu()
          state.api = ([menu_instance]) => {
            const data = menu_instance()
            data.drive['lang/']['en-us.json'].raw.links = ['temp1', 'temp2']
            return data
          }
          return state
          }},
          btn: { $: '' }
}}
  function fallback_instance () {
    return {
      _: { 'menu':{ 
        0: override_menu, 1: override_menu1, 2: '',
        3: override_menu_hover,
          mapping: { 'style': 'theme', 'lang': 'lang', 'io': 'io' }
        }, btn: {
          0: '',
          mapping: { 'lang': 'lang' }
        },
      },
      drive: {
        'theme/': {
          'style.css': {
            $ref: 'nav.css'
          }
        },
        'lang/': {
          'en-us.json': {
            raw: {
              links: ['Home', 'About', 'Contact']
            }
          }
        }
      }
    }
  }
  function override_menu ([menu], path){
    const data = menu()
    data.drive['lang/']['en-us.json'].raw = {
      title: 'Services',
      links: ['Marketing', 'Design', 'Web Dev', 'Ad Compaign']
    }
    return data
  }
  function override_menu1 ([menu], path){
    const data = menu()
    data.drive['lang/']['en-us.json'].raw = {
      title: 'Services',
      links: ['Marketing', 'Design', 'Web Dev', 'Ad Compaign']
    }
    return data
  }
  function override_menu_hover ([menu], path){
    const data = menu()
    data.drive['lang/']['en-us.json'].raw = {
      title: 'Services#hover',
      links: ['Marketing', 'Design', 'Web Dev', 'Ad Compaign']
    }
    return data
  }
}