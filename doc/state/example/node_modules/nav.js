const STATE = require('../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module, fallback_instance)

function fallback_module () { // -> set database defaults or load from database
	return {
      _: {
        'menu':{},
      }
    }
  }
function fallback_instance () {
  return {
    _: {
      'menu':{
        0: override_menu
      },
      'menu$hover': {
        0: override_menu_hover
      }
    },
    inputs: {
      'nav.css': {
        data: `
          nav{
            display: flex;
            gap: 20px;
            padding: 20px;
            background: #4b6d6d;
            color: white;
            box-shadow: 0px 1px 6px 1px gray;
            margin: 5px;
          }
          .title{
            background: linear-gradient(currentColor 0 0) 0 100% / var(--underline-width, 0) .1em no-repeat;
            transition: color .5s ease, background-size .5s;
            cursor: pointer;
          }
          .title:hover{
            --underline-width: 100%
          }
        `
      },
      'nav.json': {
        data: {
          links: ['Home', 'About', 'Contact']
        }
      }
    }
  }
}
function override_menu ([menu], path){
  const data = menu()
  data.inputs['menu.json'].data = {
    title: 'Services',
    links: ['Marketing', 'Design', 'Web Dev', 'Ad Compaign']
  }
  return data
}
function override_menu_hover ([menu], path){
  const data = menu()
  data.inputs['menu.json'].data = {
    title: 'Services#hover',
    links: ['Marketing', 'Design', 'Web Dev', 'Ad Compaign']
  }
  return data
}
/******************************************************************************
  NAV
******************************************************************************/
delete require.cache[require.resolve('menu')]
const {menu, menu_hover} = require('menu')

module.exports = nav
async function nav(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts?.sid) // hub is "parent's" io "id" to send/receive messages
  const on = {
    css: inject,
    json: fill
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <nav>
    </nav>
    <style></style>`
  const main = shadow.querySelector('nav')
  const style = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { //menu
    main.append(await menu(subs[0]), await menu_hover(subs[1]))
  }
  return el

  function onbatch(batch){
    for (const {type, data} of batch) {
      on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    main.append(...data.links.map(link => {
      const el = document.createElement('div')
      el.classList.add('title')
      el.innerHTML = link
      return el
    }))
  }
}
