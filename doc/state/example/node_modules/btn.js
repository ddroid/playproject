const STATE = require('../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

/******************************************************************************
  BTN
******************************************************************************/
const icon = require('icon')

module.exports = {btn, btn_small}
async function btn(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb, io, net } = await get(opts.sid) // hub is "parent's" io "id" to send/receive messages
  const on = {
    theme: inject,
    lang: fill
  }
  const { drive } = sdb
  const connections = {}
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <button>
      <span></span>
    </button>
    <style>
      button{
        padding: 10px 40px;
      }
    </style>`
  const style = shadow.querySelector('style')
  const button = shadow.querySelector('button')
  const title = shadow.querySelector('button > span')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  {
    button.append(await icon(subs[0]))
  }
  // ----------------------------------------
  // EVENT LISTENERS
  // ----------------------------------------
  io.on(port => {
    const { by, to } = port
    port.onmessage = event => {
      const txt = event.data
      const key = `[${by} -> ${to}]`
    }
  })
  // net.event?.click.length && net.event.click.forEach(async msg => {
  //   connections[msg.id] = { port: await io.at(msg.id), data_index: 0 }
  // })
  // button.onclick = () => {
  //   net.event.click.forEach(msg => {
  //     const connection = connections[msg.id]
  //     if(msg.args.length){
  //       connection.data_index++
  //       connection.data_index %= msg.args.length
  //     }
  //     const temp = JSON.parse(JSON.stringify(msg))
  //     temp.args = msg.args.length ? msg.args[connection.data_index] : msg.args
  //     connection.port.postMessage(temp)
      
  //   })
  // }
  
  return el

  async function onbatch(batch){
    for (const {type, paths} of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      on[type] && on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    title.replaceChildren(data.title)
  }
}
async function btn_small(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts.sid) // hub is "parent's" io "id" to send/receive messages
  const on = {
    css: inject,
    json: fill
  }
  const { drive } = sdb
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <button></button>
    <style></style>`
  const style = shadow.querySelector('style')
  const button = shadow.querySelector('button')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  {
    button.append(await icon(subs[0]))
  }
  return el

  async function onbatch(batch){
    for (const {type, paths} of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      on[type] && on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    button.innerHTML = data.title
  }
}


function fallback_module () {
  return {
    api: fallback_instance,
    _: { icon: {$: ''} }
  }
  function fallback_instance () {
    return {
      _: { icon: {0: ''} },
      drive: {
        'lang/': {
          'en-us.json': {
            raw: {
              title: 'Click me'
            }
          }
        },
      },
      net: {
        api: ['inject', 'fill'],
        event: {
          click: [],
        }
      }
    }
  }
}
