const STATE = require('../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module)

// app.js
function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      btn: { $: ([app]) => {
        const data = app()
        data.api = overbtn
        return data }
      },
      text: { $: ([text]) => text() }
    }
  }
  function fallback_instance () {
    return {
      _: {
        btn: {
          0: override0,
          1: '',
          2: '',
          3: override3
        },
        text: {
          0: textover
        }
      },
      drive: {
        style: {
          'theme.css': {
            raw: `
            .menu {
              display: flex;
              justify-content: center;
              margin: 10px 0px 10px 0px;
            }
            .text-container {
              border: 1px solid #ccc;
              padding: 10px;
            }`
          }
        }
      }
    }
  }
  function overbtn ([btn]) {
    const overdata = btn()
    overdata.drive = {
      lang: {
        'en-us.json': {
          raw: {
            label: 'Click me!'
          }
        }
      }
    }
    return overdata
  }
  function override0 ([btn]) {
    data = btn()
    data.drive = {
      lang: {
        'en-us.json': {
          raw: {
            label: 'Button 0'
          }
        }
      }
    }
    return data
  }
  // function override1 ([btn]) {
  //   data = btn()
  //   console.log('These are not')
  //   data.drive = {
  //     lang: {
  //       'en-us.json': {
  //         raw: {
  //           label: 'Button 1'
  //         }
  //       }
  //     }
  //   }
  //   return data
  // }
  // function override2 ([btn]) {
  //   data = btn()
  //   data.drive = {
  //     lang: {
  //       'en-us.json': {
  //         raw: {
  //           label: 'Button 2'
  //         }
  //       }
  //     }
  //   }
  //   return data
  // }
  function override3 ([btn]) {
    data = btn()
    data.drive = {
      lang: {
        'en-us.json': {
          raw: {
            label: 'Button 3'
          }
        }
      }
    }
    return data
  }
  function textover ([text]) {
    data = text()
    console.log(`This is working textover`)
    data.drive = {
      lang: {
        'en-us.json': {
          raw: {
            label: 'Standard'
          }
        }
      }
    }
    return data
  }
}
const btn = require('btn')
const text = require('text')

module.exports = test_menu
async function test_menu (opts) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
	<div class="menu"></div>
	<div class="text-container"></div>
	<style></style>`

  const menu = shadow.querySelector('.menu')
  const text_container = shadow.querySelector('.text-container')
  const style_el = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  console.log(subs)
  menu.append(
    await btn(subs[0]),
    await btn(subs[1]),
    await btn(subs[2]),
    await btn(subs[3])
  )
  text_container.append(await text(subs[4]))
  return el

  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }

  async function inject (data) {
    style_el.innerHTML = data.join('\n')
  }
}
