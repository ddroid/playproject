const STATE = require('../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module)
function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      search_bar: {
        $: ([app]) => app()
      }
    }
  }
  function fallback_instance () {
    return {
      _: {
        search_bar: {
          0: ''
        },
        drive: {
          style: {
            'theme.css': {
              raw: `
                .action-bar-container {
                    display: flex;
                    align-items: center;
                    background-color: #212121;
                    padding: 0.5rem;
                    // min-width: 456px
                }

                .action-bar-content {
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                    flex:1;
                }

                .icon-button {
                  display: flex;
                  align-items: center;
                  justify-content: center;
                  padding: 0;
                  border: none;
                  background-color: transparent;
                  cursor: pointer;
                }


                .separator {
                    width: 1px;
                    height: 24px;
                    background-color: #424242;
                }

                .search-bar-container {
                  flex: 1;
                  position: relative;
                }
                svg {
                  display: block;
                  margin: auto;
                }
              `
            }
          }
        }
      }
    }
  }
}
const { terminal, wand, help } = require('icons')
const search_bar = require('search_bar')

module.exports = action_bar

async function action_bar (opts) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject
  }
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
  <div class="action-bar-container">
    <div class="action-bar-content">
      <button class="icon-button">
        ${terminal()}
      </button>
      <div class="separator"></div>
      <button class="icon-button">
        ${wand()}
      </button>
      <div class="separator"></div>
      <searchbar></searchbar>
      <button class="icon-button">
        ${help()}
      </button>
    </div>
  </div>`
  const subs = await sdb.watch(onbatch)
  console.log(`actionbar subs: ${subs}`)
  shadow.querySelector('searchbar').replaceWith(search_bar(subs[0]))

  // to add a click event listener to the buttons:
  // const [btn1, btn2, btn3] = shadow.querySelectorAll('button')
  // btn1.addEventListener('click', () => { console.log('Terminal button clicked') })

  return el
  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }
  function inject(data) {
    const sheet = new CSSStyleSheet()
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }
}
