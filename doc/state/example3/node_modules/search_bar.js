const STATE = require('../../../../src/node_modules/STATE') // Adjust path as needed
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module)
function fallback_module () {
  return {
    api: fallback_instance,
    _: {}
  }
  function fallback_instance () {
    return {
      _: {},
      drive: {
        style: {
          'theme.css':{
            raw: `
              .search-bar-container {
                flex: 1;
                position: relative;
              }
          
              .search-input-container {
                height: 2rem;
                padding-left: 0.75rem;
                padding-right: 0.75rem;
                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: center;
                background-color: #303030;
                border-radius: 0.375rem;
                cursor: text;
              }
              
              svg {
                display: block;
                margin: auto;
              }
              
              .search-input-content {
                flex: 1;
              }
          
              .search-input-text {
                font-size: 0.875rem;
                color: #a0a0a0;
              }
          
              .search-input {
                width: 100%;
                background-color: transparent;
                outline: none;
                border: none;
                color: #a0a0a0;
                font-size: 0.875rem;
              }
          
              .search-reset-button {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                margin-left: 0;
                padding: 0;
                border: none;
                background-color: transparent;
              }
          
              .search-reset-button:hover {
                cursor: pointer;
              }
            `
          }
        }
      }
    }
  }
}

const { search, close } = require('icons')
module.exports = search_bar
async function search_bar (opts) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject
  }
  const el = document.createElement('div')
  el.className = 'search-bar-container'
  const shadow = el.attachShadow({ mode: 'closed' })
  const sheet = new CSSStyleSheet()
  shadow.innerHTML = `
  <div class="search-input-container">
    <div class="search-input-content">
      <div class="search-input-text"></div>
      <input type="text" class="search-input" style="display: none;">
    </div>
    <button class="search-reset-button"></button>
  </div>`

  const input_container = shadow.querySelector('.search-input-container')
  const input_content = shadow.querySelector('.search-input-content')
  const text_span = shadow.querySelector('.search-input-text')
  const input_element = shadow.querySelector('.search-input')
  const reset_button = shadow.querySelector('.search-reset-button')
  let barmode = ''
  const subs = await sdb.watch(onbatch)
  console.log(subs)

  async function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }
  input_container.onclick = on_input_container_click
  input_element.onblur = on_input_element_blur
  reset_button.onclick = on_reset_click
  text_span.onclick = on_span_click

  return el
  function inject(data) {
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets = [sheet]
  }
  function show () {
    input_content.replaceChildren(input_element)
    input_element.style.display = 'block'
    input_element.focus()
    reset_button.innerHTML = close()
    barmode = 'already'
  }
  function hide () {
    input_content.replaceChildren(text_span)
    input_element.style.display = 'none'
    reset_button.innerHTML = search()
  }
  function on_input_container_click (event) {
    // console.log('Focus Event:', event)
    if (barmode === 'already') {
      return
    }
    show()
  }
  function on_input_element_blur (event) {
    // console.log('Blur Event:', event)
    if (input_element.value === '') {
      hide()
    }
  }
  function on_span_click (event) {
    event.stopPropagation()
    handle_breadcrumb_click(event)
  }
  function on_reset_click (event) {
    event.stopPropagation()
    handle_reset(event)
  }
  function handle_reset (event) {
    // console.log('Reset Event:', event)
    input_element.value = ''
    hide()
  }
  function handle_breadcrumb_click (event) {
    // console.log('Breadcrumb Event:', event)
    show()
    input_element.placeholder = '#night'
  }
}