const STATE = require('../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, subs: [get] } = statedb(fallback_module)

function fallback_module () {
  return {
    api: fallback_instance,
    _: {
      btn: {
        0: btn_overider,
        1: btn_overider,
        2: btn_overider,
        // 3: btn_overider
      },
      text: {}
    }
  }
  function fallback_instance () {
    return {
      _: {
        btn: {
          0: btn_overider,
          1: btn_overider,
          2: btn_overider,
          // 3: btn_overider
        },
        text: {}
      },
      drive: {
        style: {
          'theme.css': {
            raw: `
            .menu {
              display: flex;
              gap: 10px;
              margin-bottom: 10px;
            }
            .text-container {
              border: 1px solid #ccc;
              padding: 10px;
            }`
          }
        }
      }
    }
  }
  function btn_overider([btn]){
    console.log(btn)
    const data = btn()
    console.log(data)
    return data
  }
}

const btn = require('btn')
const text_module = require('text')

module.exports = test_menu
async function test_menu (opts) {
  const { id, sdb } = await get(opts.sid)
  const on = {
    style: inject
  }

  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
	<div class="menu"></div>
	<div class="text-container"></div>
	<style></style>`

  const menu_el = shadow.querySelector('.menu')
  const text_container_el = shadow.querySelector('.text-container')
  const style_el = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  console.log(subs)
  console.dir(subs)
  console.dir(subs[0])

  menu_el.append(
    await btn(subs[0]),
    // await btn(subs[0][1]),
    // await btn(subs[0][2]),
    // await btn(subs[0][3])
    )
  text_container_el.append(await text_module(subs[1]))
  
  return el

  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }

  async function inject (data) {
    style_el.innerHTML = data.join('\n')
  }
}
