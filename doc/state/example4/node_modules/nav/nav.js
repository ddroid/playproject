const STATE = require('../../../../../src/node_modules/STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

/******************************************************************************
  NAV
******************************************************************************/
const {menu, menu_hover} = require('menu')
const {btn, btn_small} = require('btn')
const editor = require('editor')

module.exports = nav
async function nav(opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts?.sid) // hub is "parent's" io "id" to send/receive messages
  const on = {
    theme: inject,
    lang: fill,
    edit_mode
  }

  const { drive } = sdb
  // console.log(await drive.put('lang/en-uk.json', { links: ['Home', 'About', 'Contact'] }))
  // console.log(await drive.get('lang/en-uk.json'))
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <nav class="main">
      <div class="box">

      <div>
    </nav>
    <style></style>`
  const main = shadow.querySelector('nav')
  const div = shadow.querySelector('div')
  const style = shadow.querySelector('style')
  const subs = await sdb.watch(onbatch)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  console.log(subs)
  const editor_el = editor(style, inject, id)
  { //menu
    main.append(await menu(subs[0]), await menu(subs[1]), await menu(subs[2]), await menu_hover(subs[3]), await btn(subs[4]), await btn(subs[5]), editor_el)
  }
  return el

  async function onbatch(batch){
    for (const {type, paths} of batch) {
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      on[type] && on[type](data)
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill([data]) {
    div.replaceChildren(...data.links.map(link => {
      const el = document.createElement('div')
      el.classList.add('title')
      el.innerHTML = link
      return el
    }))
  }
  async function edit_mode() {
    if (main.lastElementChild.classList.contains('editor')) {
      main.lastElementChild.remove()  
    }
    else 
      main.append(editor_el)
  }
}


function fallback_module () { // -> set database defaults or load from database
  return { api, _: { 'menu':{ $: menu$ }, btn: { $: btn$ }, editor: 0 } }
  function api () {
    const links = ['Marketing', 'Design', 'Web Dev', 'Ad Compaign']
    const opts_menu = { title: 'Services', links }
    const opts_menu_hover = { title: 'Services#hover', links }
    return {
      _: { 
        menu: { 
          0: opts_menu,
          1: opts_menu,
          2: '',
          3: opts_menu_hover,
          mapping: { 'style': 'theme', 'lang': 'lang', 'io': 'io' }
        }, 
        btn: {
          0: 'Register',
          1: 'Switch',
          mapping: { 'lang': 'lang' }
        }
      },
      drive: {
        'theme/': {
          'style.css': {
            $ref: 'nav.css'
          }
        },
        'lang/': {
          'en-us.json': {
            raw: {
              links: ['Home', 'About', 'Contact']
            }
          }
        }
      }
    }
  }
  function menu$ (args, tools, [menu]){
    const state = menu()
    state.api = api
    state.api.hover = api
    return state
    function api (args, tools, [menu]) {
      console.log('menu$ called', args)
      const data = menu()
      if (args) data.drive['lang/']['en-us.json'].raw = args
      return data
    }
  }
  function btn$ (args, tools, [btn]){
    const data = btn()
    data.api = api
    return data
    function api (args, tools, [btn]) {
      console.log('btn$ called', args)
      const data = btn()
      if (args) data.drive['lang/']['en-us.json'].raw.title = args
      return data
    }
  }
  
}