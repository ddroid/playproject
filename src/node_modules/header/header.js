const graphic = require('graphic')
const Rellax = require('rellax')
const IO = require('io')
const STATE = require('STATE')
const name = 'header'
const statedb = STATE(__filename)
const shopts = { mode: 'closed' }
/******************************************************************************
  HEADER COMPONENT
******************************************************************************/

// ----------------------------------------
const { sdb, subs: [get], sub_modules } = statedb(fallback)
function fallback () {
  return {
    "0": {},
    "1": {
      "inputs": ["header.css", "header.json"]
    },
    "header.css": {
      $ref: new URL('src/node_modules/css/default/header.css', location).href
    },
    "header.json": {
      data: {
        "title": "Infrastructure for the next-generation Internet"
      }
    }
  }
}
module.exports = header

async function header (opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await get(opts.sid)
  const on = {
    css: inject,
    json: fill,
    scroll
  }
  const send = await IO(id, name, on)
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  var graphics = [
    graphic('playIsland', './src/node_modules/assets/svg/play-island.svg'),
    graphic('sun', './src/node_modules/assets/svg/sun.svg'),
    graphic('cloud1', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud2', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud3', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud4', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud5', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud6', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud7', './src/node_modules/assets/svg/cloud.svg'),
  ]

  const [playIsland, sun, cloud1, cloud2, cloud3, cloud4, cloud5, cloud6, cloud7] = await Promise.all(graphics)

  // Parallax effects
  // let playRellax = new Rellax(playIsland, { speed: 2 })
  let sunRellax = new Rellax(sun, { speed: 2 })
  let cloud1Rellax = new Rellax(cloud1, { speed: 4 })
  let cloud2Rellax = new Rellax(cloud2, { speed: 2 })
  let cloud3Rellax = new Rellax(cloud3, { speed: 4 })
  let cloud4Rellax = new Rellax(cloud4, { speed: 2 })
  let cloud5Rellax = new Rellax(cloud5, { speed: 4 })
  let cloud6Rellax = new Rellax(cloud6, { speed: 3 })
  let cloud7Rellax = new Rellax(cloud7, { speed: 3 })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
  <div class='header'>
      <h1 class='title'></h1>
      <section class='scene'>
          <div class='sunCloud'>
          </div>
      </section>
  </div>
  <style></style>`
  // ----------------------------------------
  const style = shadow.querySelector('style')
  const scene = shadow.querySelector('.scene')
  const sunCloud = shadow.querySelector('.sunCloud')
  const title = shadow.querySelector('.title')
  await sdb.watch(onbatch)
  scene.append(cloud3, cloud4, cloud5, cloud6, cloud7, playIsland)
  sunCloud.append(cloud1, sun, cloud2)
  
  return el

  function onbatch(batch) {
    for (const {type, data} of batch) {
      on[type](data)
    }  
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
  async function fill ([ opts ]) {
    title.innerHTML = opts.title
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
}

