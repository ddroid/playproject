const graphic = require('graphic')
const Rellax = require('rellax')
const IO = require('io')
const statedb = require('STATE')
const default_data = require('./data.json')
/******************************************************************************
  HEADER COMPONENT
******************************************************************************/
// ----------------------------------------
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = header

async function header (opts) {
  // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'header'
    const status = {}
    const on = {
      inject,
      inject_all,
      scroll
    }
    const sdb = statedb()
    let data = sdb.get(opts.sid)
    if(!data){
      const {id} = sdb.add(default_data, opts.hub)
      data = {...default_data, id}
    }
    const {send, css_id} = await IO({id: data.id, name, type: 'comp', comp: name, hub: opts.hub, css: data.css}, on)
    // ----------------------------------------
    // OPTS
    // ----------------------------------------
    var graphics = [
      graphic('playIsland', './src/node_modules/assets/svg/play-island.svg'),
      graphic('sun', './src/node_modules/assets/svg/sun.svg'),
      graphic('cloud1', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud2', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud3', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud4', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud5', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud6', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud7', './src/node_modules/assets/svg/cloud.svg'),
    ]

    const [playIsland, sun, cloud1, cloud2, cloud3, cloud4, cloud5, cloud6, cloud7] = await Promise.all(graphics)

		// Parallax effects
		// let playRellax = new Rellax(playIsland, { speed: 2 })
		let sunRellax = new Rellax(sun, { speed: 2 })
		let cloud1Rellax = new Rellax(cloud1, { speed: 4 })
		let cloud2Rellax = new Rellax(cloud2, { speed: 2 })
		let cloud3Rellax = new Rellax(cloud3, { speed: 4 })
		let cloud4Rellax = new Rellax(cloud4, { speed: 2 })
		let cloud5Rellax = new Rellax(cloud5, { speed: 4 })
		let cloud6Rellax = new Rellax(cloud6, { speed: 3 })
		let cloud7Rellax = new Rellax(cloud7, { speed: 3 })
		// ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    shadow.innerHTML = `
		<div class='header'>
				<h1 class='title'>${data.title}</h1>
				<section class='scene'>
						<div class='sunCloud'>
						</div>
				</section>
		</div>
		`
    // ----------------------------------------
		const scene = shadow.querySelector('.scene')
		const sunCloud = shadow.querySelector('.sunCloud')
		scene.append(cloud3, cloud4, cloud5, cloud6, cloud7, playIsland)
		sunCloud.append(cloud1, sun, cloud2)
		
    init_css()
    return el

    async function init_css () {
      const pref = JSON.parse(localStorage.pref)
      const pref_shared = pref[name] || data.shared || [{ id: name }]
      const pref_uniq = pref[css_id] || data.uniq || []
      pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
      pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
    }
    async function scroll () {
      el.scrollIntoView({behavior: 'smooth'})
      el.tabIndex = '0'
      el.focus()
      el.onblur = () => {
        el.tabIndex = '-1'
        el.onblur = null
      }
    }
    async function inject_all ({ data }) {
      const sheet = new CSSStyleSheet
      sheet.replaceSync(data)
      shadow.adoptedStyleSheets.push(sheet)
    }
    async function inject ({ data }){
      const style = document.createElement('style')
      style.innerHTML = data
      shadow.append(style)
    }
    async function get_theme ({local = true, theme = 'default', id}) {
      let theme_css
      if(local)
        theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
      else
        theme_css = JSON.parse(localStorage[theme])[id]
      return theme_css
    }
}

