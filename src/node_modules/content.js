/******************************************************************************
  CONTENT COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = content

async function content(data, port, hub) {
    // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'content'
    const id = `${ID}:${count++}` // assigns their own name
    const status = {}
    const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const style = document.createElement('style')
    el.classList.add('content')
    const shadow = el.attachShadow(shopts)
    shadow.adoptedStyleSheets = [sheet]
    shadow.innerHTML = `
    <div class="main">
        <h2 class="subTitle subTitleColor">${data.title}</h2>
        <article class=article>${data.article}</article>
        ${data.url ? `<a class="button buttonBg" href=${data.url} target="_blank">${data.action}</a>` : ''}
    </div>
    `
    shadow.append(style)
    
    port.onmessage = onmessage
    inject_all({ data: await get_theme(name) })
    // inject({ data: await get_theme(hub +'/'+ name) })
    return el

    async function onmessage ({ data }){
        on_rx[data.type](data.data)
    }
    async function inject_all ({ data }) {
        sheet.replaceSync(data)
        shadow.adoptedStyleSheets = [sheet]
    }
    async function inject ({ data }){
        style.innerText = data
    }
    async function get_theme (slice) {
        const pref = JSON.parse(localStorage.pref)[name]
        let theme
        if(pref){
            if(Object.keys(localStorage).includes(pref))
                theme = JSON.parse(localStorage[pref]).css[name]
            else
                theme = await (await fetch(`./src/node_modules/css/${pref}/${slice}.css`)).text()
        }
        else
            theme = await (await fetch(`./src/node_modules/css/default/${slice}.css`)).text()
        return theme
    }
}
