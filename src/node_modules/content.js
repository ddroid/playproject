const IO = require('io')
const statedb = require('statedb')
/******************************************************************************
  CONTENT COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = content

async function content (opts) {
  // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'content'
    const id = `${ID}:${count++}` // assigns their own name
    const status = {}
    const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
    const on = {
      inject,
      inject_all,
      scroll
    }
    const data = await statedb(opts.sid)
    const {send, css_id} = await IO({name, type: 'comp', comp: name, hub: opts.hub, sid: opts.sid, uniq: data.uniq, shared: data.shared}, on)
    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const style = document.createElement('style')
    el.classList.add('content')
    const shadow = el.attachShadow(shopts)
    shadow.adoptedStyleSheets = [sheet]
    shadow.innerHTML = `
    <div class="main">
        <h2 class="subTitle subTitleColor">${data.title}</h2>
        <article class=article>${data.article}</article>
        ${data.url ? `<a class="button buttonBg" href=${data.url} target="_blank">${data.action}</a>` : ''}
    </div>
    `
    shadow.append(style)
    
    init_css()
    return el

    async function init_css () {
      const pref = JSON.parse(localStorage.pref)
      const pref_shared = pref[name] || data.shared || [{ id: name }]
      const pref_uniq = pref[css_id] || data.uniq || []
      pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
      pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
    }
    async function scroll () {
      el.scrollIntoView({behavior: 'smooth'})
      el.tabIndex = '0'
      el.focus()
      el.onblur = () => {
        el.tabIndex = '-1'
        el.onblur = null
      }
    }
    async function inject_all ({ data }) {
      const sheet = new CSSStyleSheet
      sheet.replaceSync(data)
      shadow.adoptedStyleSheets.push(sheet)
    }
    async function inject ({ data }){
      const style = document.createElement('style')
      style.innerHTML = data
      shadow.append(style)
    }
    async function get_theme ({local = true, theme = 'default', id}) {
      let theme_css
      if(local)
        theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
      else
        theme_css = JSON.parse(localStorage[theme])[id]
      return theme_css
    }
}
