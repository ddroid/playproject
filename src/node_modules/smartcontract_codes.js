const graphic = require('graphic')
const Content = require('content')
/******************************************************************************
  SMARTCONTRACT-CODES COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = smartcontract_codes

async function smartcontract_codes (data, port) {
    // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'smartcontract_codes'
    const id = `${ID}:${count++}` // assigns their own name
    const status = {}
    const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
    // ----------------------------------------
    // OPTS
    // ----------------------------------------
  const graphics = [
    graphic('island', './src/node_modules/assets/svg/floating-island1.svg'),
    graphic('islandMiddle', './src/node_modules/assets/svg/floating-island2.svg'),
    graphic('islandRight', './src/node_modules/assets/svg/floating-island2.svg'),
    graphic('blossom', './src/node_modules/assets/svg/blossom-tree.svg'),
    graphic('tree', './src/node_modules/assets/svg/single-tree.svg'),
    graphic('trees', './src/node_modules/assets/svg/two-trees.svg'),
    graphic('stone', './src/node_modules/assets/svg/stone.svg'),
    graphic('smallStone', './src/node_modules/assets/svg/small-stone.svg'),
  ]

    const [island, islandMiddle, islandRight, blossom, tree, trees, stone, smallStone] = await Promise.all(graphics)

    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    shadow.adoptedStyleSheets = [sheet]
    shadow.innerHTML = `
    <section id="smartcontractCodes" class='section'>

      <div class='scene'>
          <div class='deco'>
              <img class='logo' src=${data.logo} alt="${data.title} logo">
              <img class='screenshot' src=${data.image} alt=${data.title}>
              ${trees.outerHTML}
          </div>
          ${island.outerHTML}
      </div>
      <div class='sceneMedium'>
          <div class='deco'>
              <div class='container'>
                  ${smallStone.outerHTML}
                  ${stone.outerHTML}
                  ${blossom.outerHTML}
              </div>
              ${islandMiddle.outerHTML}
          </div>
          <div class='deco'>
              ${tree.outerHTML}
              ${islandRight.outerHTML}
          </div>
      </div>
      
  </section>
  `
  const main = shadow.querySelector('section')
  main.prepend(await Content(data, await init_ch({ name: 'content' }), name))
  
  port.onmessage = event => inject(event.data)
  const css = await get_theme()
  inject({ data: css })
  return el

  async function init_ch({ name }) {
    port.postMessage({type: 'req_ch', data: name})
    return new Promise(resolve => 
      port.onmessage = event => {
          resolve(event.ports[0])
          port.onmessage = event => inject(event.data)
      }
    )
  }
  async function inject ({ data }) {
      sheet.replaceSync(data)
      shadow.adoptedStyleSheets = [sheet]
  }
  async function get_theme () {
      const pref = JSON.parse(localStorage.pref)[name]
      let theme
      if(pref){
          if(Object.keys(localStorage).includes(pref))
          theme = JSON.parse(localStorage[pref]).css[name]
          else
          theme = await (await fetch(`./src/node_modules/css/${pref}/${name}.css`)).text()
      }
      else
          theme = await (await fetch(`./src/node_modules/css/default/${name}.css`)).text()
      return theme
  }
}
