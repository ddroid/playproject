const IO = require('io')
const statedb = require('STATE')
/******************************************************************************
  GRAPH COMPONENT
******************************************************************************/
// ----------------------------------------
const shopts = { mode: 'closed' }
// ----------------------------------------

module.exports = graph_explorer

async function graph_explorer (opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = 'graph_explorer'
  const hub_id = opts.hub[0]
  const status = { tab_id: 0, count: 0 }
  const on = {
    init,
    inject,
    inject_all,
    scroll
  }
	const sdb = statedb()
	const main_data = sdb.get(opts.sid)
  const {send, css_id} = await IO({id: main_data.id, name, type: 'comp', comp: name, hub: opts.hub, css: main_data.css}, on)
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
  <main>

  </main>
  `
  const main = shadow.querySelector('main')
  shadow.addEventListener('copy', handleClipboard)

  init_css()
  return el



  function handleClipboard (e) {
    const selection = shadow.getSelection()
    const range = selection.getRangeAt(0)
    const selectedElements = []
    const walker = document.createTreeWalker(
      range.commonAncestorContainer,
      NodeFilter.SHOW_ELEMENT,
      {
          acceptNode: function(node) {
              return range.intersectsNode(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
          }
      },
      false
    );

    while (walker.nextNode()) {
        walker.currentNode.tagName === 'SPAN' && selectedElements.push(walker.currentNode);
    }
    let text = ''
    selectedElements.forEach(el => {
      const before = getComputedStyle(el, '::before').content
      text += (before === 'none' ? '' : before.slice(1, -1)) + el.textContent
      text += el.classList.contains('name') ? '\n' : ''
    })
    e.clipboardData.setData('text/plain', text)
    e.preventDefault()
  }

  async function init ({ data }) {
    status.graph = data
    const root_nodes = Object.values(data).filter(node => !node.hub)
    main.append(...root_nodes.map((data, i) => add_entry({data, last: i === root_nodes.length - 1 })))
  }
  function create_node (type, id) {
    const element = document.createElement('div')
    element.classList.add(type, 'node')
    element.tabIndex = '0'
    element.id = 'a'+id
    return element
  }
  function html_template (data, last, space){
    const element = create_node(data.type, data.id)
    element.dataset.space = space
    element.dataset.grand_last = last ? 'a' : ''

    return [element, last, space]
  }
  /******************************************
   Addition Operation
  ******************************************/
  // function add_el ({ data, parent, space, grand_last, type }){
  //   const is_single = parent.children.length ? false : true
  //   if(data.root){
  //     parent.prepend(add_root({ data, last: false}))
  //     return
  //   }
  //   //hub or sub node check
  //   if(type === 'inputs')
  //     parent.append(on_add[type]({ data, space, grand_last, first: is_single}))
  //   else
  //     parent.prepend(on_add[type]({ data, space, grand_last, last: is_single}))
  // }

  //A button with 4 slots for sub nodes, data entity
  function add_entry ({ data, first, last, space = '' }) {
    [ element, last, space ] = html_template(data, last, space)
    element.innerHTML = `
      <style class="hi"></style>
      <style class="lo"></style>
      <div class="hub nodes">
      </div>
      <div class="inputs nodes">
      </div>
      <div class="details">
        <span>${space}${last ? '└' : first ? "┌" : '├'}</span>
        ${data?.hub?.length ? '<span class="hub_emo"></span>' : ''}
        ${data?.sub?.length ? '<span class="sub_emo"></span>' : ''}
        ${data?.inputs?.length ? '<span class="inp"></span>' : ''}
        ${data?.outputs?.length ? '<span class="out"></span>' : ''}
        <span class="name">${data.name}</span>
      </div>
      <div class="outputs nodes">
      </div>
      <div class="sub nodes">
      </div>
    `
    const details = element.querySelector('.details > .name')
    const hub_emo = element.querySelector('.details > .hub_emo')
    const sub_emo = element.querySelector('.details > .sub_emo')
    const inp = element.querySelector('.details > .inp')
    const out = element.querySelector('.details > .out')
    const hub = element.querySelector('.hub')
    const outputs = element.querySelector('.outputs')
    const inputs = element.querySelector('.inputs')
    const sub = element.querySelector('.sub')
    const style_hi = element.querySelector('style.hi')
    const style_lo = element.querySelector('style.lo')

    details.onclick = () => send({ type: 'click', to: hub_id, data })
    let lo_space = space + (last ? '&emsp;&nbsp;' : '│&nbsp;&nbsp;')
    let hi_space = space + (first ? '&emsp;&nbsp;' : '│&nbsp;&nbsp;')
    const lo_space_len = lo_space.length
    const hi_space_len = hi_space.length
    const count = status.count++
    data?.hub?.length && listen({el: hub, emo: hub_emo, data: data.hub, pos: true})
    data?.sub?.length && listen({el: sub, emo: sub_emo, data: data.sub, pos: false})
    data?.inputs?.length && listen({el: inputs, emo: inp, data: data.inputs, pos: true, type: 'input'})  
    data?.outputs?.length && listen({el: outputs, emo: out, data: data.outputs, pos: false, type: 'output'})
    
    return element

    async function listen({ emo, pos, type, on, ...rest }, i) {
      let gap = pos ? hi_space : lo_space
      if(emo.classList.contains('inp')){
        gap = gap.slice(0, hi_space_len) + `<span class="hi_space${count}">&emsp;</span><span class="hi_xpace${count}">│&nbsp;</span>`+gap.slice(hi_space_len + 6)
        style_hi.innerHTML = `.hi_xpace${count}{display: none;}`
      }
      else if(emo.classList.contains('out')){
        gap = gap.slice(0, lo_space_len) + `<span class="lo_space${count}">&emsp;</span><span class="lo_xpace${count}">│&nbsp;</span>`+gap.slice(lo_space_len + 6)
        style_lo.innerHTML = `.lo_xpace${count}{display: none;}`
      }
      hi_space += '&emsp;&nbsp;&nbsp;'
      lo_space += '&emsp;&nbsp;&nbsp;'
      emo.onclick = () => {
        console.log(gap)
        emo.classList.toggle('on')
        if(emo.classList.contains('hub_emo'))
          style_hi.innerHTML = `.hi_${on ? 'x' : 's'}pace${count}{display: none;}`
        else if(emo.classList.contains('sub_emo'))
          style_lo.innerHTML = `.lo_${on ? 'x' : 's'}pace${count}{display: none;}`
        on = handle_click({space: gap, is_on: on, pos, ...rest })
      }
    }
  }
  // async function add_node_data (name, type, parent_id, users, author){
  //   const node_id = status.graph.length
  //   status.graph.push({ id: node_id, name, type: state.code_words[type], room: {}, users })
  //   if(parent_id){
  //     save_msg({
  //         head: [id],
  //         type: 'save_msg',
  //         data: {username: 'system', content: author + ' added ' + type.slice(0,-1)+': '+name, chat_id: parent_id}
  //       })
  //     //Add a message in the chat
  //     if(state.chat_task && parent_id === state.chat_task.id.slice(1))
  //       channel_up.send({
  //         head: [id, channel_up.send.id, channel_up.mid++],
  //         type: 'render_msg',
  //         data: {username: 'system', content: author+' added '+type.slice(0,-1)+': '+name}
  //       })
  //     const sub_nodes = graph[parent_id][state.add_words[type]]
  //     sub_nodes ? sub_nodes.push(node_id) : graph[parent_id][state.add_words[type]] = [node_id]
  //   }
  //   else{
  //     graph[node_id].root = true
  //     graph[node_id].users = [opts.host]
  //   }
  //   save_msg({
  //     head: [id],
  //     type: 'save_msg',
  //     data: {username: 'system', content: author + ' created ' + type.slice(0,-1)+': '+name, chat_id: node_id}
  //   })
  //   const channel = state.net[state.aka.taskdb]
  //   channel.send({
  //     head: [id, channel.send.id, channel.mid++],
  //     type: 'set',
  //     data: graph
  //   })
    
  // }
  // async function on_add_node (data) {
  //   const node = data.id ? shadow.querySelector('#a' + data.id + ' > .'+data.type) : main
  //   node && node.children.length && add_el({ data: { name: data.name, id: status.graph.length, type: state.code_words[data.type] }, parent: node, grand_last: data.grand_last, type: data.type, space: data.space })
  //   add_node_data(data.name, data.type, data.id, data.users, data.user)
  // }
  /******************************************
   Event handlers
  ******************************************/
  function handle_focus (e) {
    state.xtask = e.target
    state.xtask.classList.add('focus')
    state.xtask.addEventListener('blur', e => {
      if(e.relatedTarget && e.relatedTarget.classList.contains('noblur'))
        return
      state.xtask.classList.remove('focus')
      state.xtask = undefined
    }, { once: true })
  }
  function handle_popup (e) {
    const el = e.target
    el.classList.add('show')
    popup.style.top = el.offsetTop - 20 + 'px'
    popup.style.left = el.offsetLeft - 56 + 'px'
    popup.focus()
    popup.addEventListener('blur', () => {
      el.classList.remove('show')
    }, { once: true })
  }
  function handle_click ({ el, data, space, is_on, pos, hub_id }) {
    el.classList.toggle('show')
    if(data && el.children.length < 1){
      length = data.length - 1
      data.forEach((value, i) => el.append(add_entry({ data: {...status.graph[value], hub_id}, first: pos ? 0 === i : false, last: pos ? false : length === i, space })))
    }
    return !is_on
  }
  async function handle_export () {
    const data = await traverse( state.xtask.id.slice(1) )
    const json_string = JSON.stringify(data, null, 2);
    const blob = new Blob([json_string], { type: 'application/json' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'data.json';
    link.click();
  }
  async function handle_add (data) {
    data = data.slice(2).trim().toLowerCase() + 's'
    const input = document.createElement('input')
    let node, task_id, space = '', grand_last = true, root = true
    //expand other siblings
    if(state.xtask){
      node = state.xtask.querySelector('.' + data)
      task_id = state.xtask.id.slice(1)
      const before = state.xtask.querySelector('.' + data.slice(0,3))
      before.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable: true, view: window}))
      node.classList.add('show')
      grand_last = state.xtask.dataset.grand_last
      space = state.xtask.dataset.space
      state.xtask.classList.remove('focus')
      state.xtask = undefined
      root = false
    }
    else{
      node = main
      task_id = ''
    }
    node.prepend(input)
    input.onkeydown = async (event) => {
      if (event.key === 'Enter') {
        input.blur()
        add_el({ data : { name: input.value, id: status.graph.length, type: state.code_words[data], root }, space, grand_last, type: data, parent: node })
        const users = task_id ? graph[task_id].users : [host]
        add_node_data(input.value, data, task_id, users, host)
        //sync with other users
        if(users.length > 1)
          channel_up.send({
            head: [id, channel_up.send.id, channel_up.mid++],
            type: 'send',
            data: {to: 'task_explorer', route: ['up', 'task_explorer'], users: graph[task_id].users.filter(user => user !== host), type: 'on_add_node', data: {name: input.value, id: task_id, type: data, users, grand_last, space, user: host} }
          })
      }
    }
    input.focus()
    input.onblur = () => input.remove()
  }
  /******************************************
   Tree traversal
  ******************************************/
  async function jump (e){
    let target_id = e.currentTarget.dataset.id
    const el = main.querySelector('#a'+target_id)
    if(el)
      el.focus()
    else{
      const path = []
      let temp
      for(temp = status.graph[target_id]; temp.hub; temp = status.graph[temp.hub[0]])
        path.push(temp.id)
      console.log(temp, path)
      temp = main.querySelector('#a'+temp.id)
      target_id = 'a'+target_id
      while(temp.id !== target_id){
        const sub_emo = temp.querySelector('.sub_emo')
        sub_emo.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable: true, view: window}))
        temp.classList.add('show')
        temp = temp.querySelector('#a'+path.pop())
      }
      temp.focus()
    }
      
  }
  async function traverse (id) {
    state.result = []
    state.track = []
    recurse(id)
    return state.result
  }
  function recurse (id){
    if(state.track.includes(id))
      return
    state.result.push(graph[id])
    state.track.push(id)
    for(temp = 0; graph[id].sub && temp < graph[id].sub.length; temp++)
      recurse(graph[id].sub[temp])
    for(temp = 0; graph[id].inputs && temp < graph[id].inputs.length; temp++)
      recurse(graph[id].inputs[temp])
    for(temp = 0; graph[id].outputs && temp < graph[id].outputs.length; temp++)
      recurse(graph[id].outputs[temp])
  }
  /******************************************
   Communication
  ******************************************/
  async function init_css () {
    const pref = JSON.parse(localStorage.pref)
    const pref_shared = pref[name] || data.shared || [{ id: name }]
    const pref_uniq = pref[css_id] || data.uniq || []
    pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
    pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
  async function inject_all ({ data }) {
    const sheet = new CSSStyleSheet
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets.push(sheet)
  }
  async function inject ({ data }){
    const style = document.createElement('style')
    style.innerHTML = data
    shadow.append(style)
  }
  async function get_theme ({local = true, theme = 'default', id}) {
    let theme_css
    if(local)
      theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
    else
      theme_css = JSON.parse(localStorage[theme])[id]
    return theme_css
  }
}