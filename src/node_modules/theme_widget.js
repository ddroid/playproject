/******************************************************************************
  THEME_WIDGET COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------

module.exports = theme_widget

async function theme_widget(components, port) {
  port.onmessage = event => on_rx[event.data.type](event.data)
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {}, channels: {}} // all state of component instance
  localStorage.pref || (localStorage.pref = '{}')
  status.themes = {
    local: ['default', 'dark'],
    saved: Object.entries(localStorage).filter(entry => JSON.parse(entry[1]).theme && entry[0] ).map(entry => entry[0])
  }
  const on_rx = {
    refresh
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <section>
    <div class="btn">
      ⚙️
    </div>
    <div class="popup">
      <div class="box">
        <div class="stats">
          Active components: 
        </div>
        <div class="list">
        </div>
      </div>
      <div class="editor">
        <h3></h3>
        <textarea></textarea>
        <select></select>
        <button class="inject">
          Inject
        </button>
        <button class="load">
          Load
        </button>
        <button class="save">
          Save
        </button>
        <input placeholder='Enter theme' />
        <button class="add">
          Add
        </button>
      </div>
    </div>
  </section>`
  const btn = shadow.querySelector('.btn')
  const popup = shadow.querySelector('.popup')
  const list = popup.querySelector('.list')
  const stats = popup.querySelector('.stats')
  const editor = popup.querySelector('.editor')
  const title = editor.querySelector('h3')
  const inject_btn = editor.querySelector('.inject')
  const load_btn = editor.querySelector('.load')
  const save_btn = editor.querySelector('.save')
  const add_btn = editor.querySelector('.add')
  const textarea = editor.querySelector('textarea')
  const dropdown = editor.querySelector('select')
  const input = editor.querySelector('input')

  btn.onclick = () => popup.classList.toggle('active')
  inject_btn.onclick = inject
  load_btn.onclick = load
  save_btn.onclick = save
  add_btn.onclick = add
  update_dropdown()
  return el

  async function add () {
    localStorage[input.value] = '{"theme":"true","css":{}}'
    status.themes.saved.push(input.value)
    update_dropdown()
  }
  async function save () {
    const theme = localStorage[dropdown.value] && JSON.parse(localStorage[dropdown.value])
    if(theme){
      theme.css[title.innerHTML] = textarea.value
      localStorage[dropdown.value] = JSON.stringify(theme)
    }
    const pref = JSON.parse(localStorage.pref)
    pref[title.innerHTML] = dropdown.value
    localStorage.pref = JSON.stringify(pref)
  }
  async function inject () {
    port.postMessage({type: 'send', to_type: 'inject', to: status.active_id, data: textarea.value})
  }
  async function load () {
    const name = dropdown.value
    let theme
    if(status.themes.local.includes(name)){
      const temp = await fetch(`./src/node_modules/css/${name}/${title.innerHTML}.css`)
      theme = await temp.text()
    }
    else{
      theme = JSON.parse(localStorage[name]).css[title.innerHTML]
    }
    textarea.value = theme
  }
  async function refresh ({ data }) {
    status.tree = data
    stats.innerHTML = `Active components: ${Object.keys(data).length}`
    list.append(...Object.entries(data).filter(entry => entry[1].hub === '').map(make_node))
  }
  function make_node (component){
    const el = document.createElement('div')
    el.classList.add('item')
    el.innerHTML = `<span class='pre'>+</span> <span class='name'>${component[1].name}</span> <div class="sub"></div>`
    const pre_btn = el.querySelector('.pre')
    const name = el.querySelector('.name')
    const sub = el.querySelector('.sub')
    pre_btn.onclick = () => {
      pre_btn.innerHTML = pre_btn.innerHTML === '+' ? '-' : '+'
      console.log(component)
      if(sub.children.length)
        sub.classList.toggle('hide')
      else
        sub.append(...Object.entries(status.tree).filter(entry => entry[1].hub == component[0]).map(make_node))
    }
    name.onclick = async () => {
      title.innerHTML = component[1].name
      editor.classList.toggle('active')
      textarea.value = await get_css(component[1].name)
      status.active_id = component[0]
    }
    return el
  }
  async function get_css (name) {
    const temp = JSON.parse(localStorage.pref)
    const pref = temp[name]
    let theme
    if(pref){
      if(Object.keys(localStorage).includes(pref))
        theme = JSON.parse(localStorage[pref]).css[name]
      else
        theme = await (await fetch(`./src/node_modules/css/${pref}/${name}.css`)).text()
    }
    else
      theme = await (await fetch(`./src/node_modules/css/default/${name}.css`)).text()
    dropdown.value = pref
    return theme
  }
  async function update_dropdown () {
    dropdown.innerHTML = `<optgroup label='Local'>${status.themes.local.map(theme => `<option>${theme}</option>`)}</optgroup>` +
    `<optgroup label='Saved'> ${status.themes.saved.map(theme => `<option>${theme}</option>`)}</optgroup>`
  }
}

function get_theme() {
  return `
  *{
    box-sizing: border-box;
  }
  section{
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 50;
    display: flex;
    align-items: end;
  }
  .btn{
    font-size: 30px;
    cursor: pointer;
  }
  .popup{
    display: none;
    position: relative;
    bottom: 44px;
    margin-left: -42px;
    gap: 10px;
    align-items: end;
  }
  .popup.active{
    display: flex;
  }
  .popup .box{
    background: #beb2d7;
    border-radius: 5px;
    padding: 10px;
  }
  .popup .list{
    max-height: 60vh;
    overflow-y: scroll;
  }
  .popup .list .item{
    white-space: nowrap;
    cursor: pointer;
  }
  .popup .list .item > .sub{
    display: block;
    margin-left: 10px;
  }
  .popup .list .item > .sub.hide{
    display: none;
  }
  .popup .list .item > .name:hover{
    background: #ada1c6;
  }
  .popup .editor{
    display: none;
    min-height: 60vh;
    background: #beb2d7;
    position: relative;
    border-radius: 5px;
    padding: 0 10px;
  }
  .popup .editor.active{
    display: block;
  }
  .popup .editor textarea{
    min-height: 44vh;
    min-width: 100%;
  }
  `
}