const theme_editor = require('theme_editor')
const graph_explorer = require('graph_explorer')
const IO = require('io')
const statedb = require('STATE')
/******************************************************************************
  THEME_WIDGET COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------

module.exports = theme_widget

async function theme_widget (opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = 'theme_widget'
  const id = `${ID}:${count++}` // assigns their own name
  const status = { tab_id: 0 }
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {}, channels: {}} // all state of instance instance
  const on = {
    refresh,
    get_select,
    inject,
    inject_all,
    scroll,
    click
  }
	const sdb = statedb()
	const data = sdb.get(opts.sid)
  const {send, css_id} = await IO({id: data.id, name, type: 'comp', comp: name, hub: opts.hub, css: data.css}, on)
  
  status.dirts = JSON.parse(localStorage.dirt || (localStorage.dirt = '{}'))
  localStorage.pref || (localStorage.pref = '{}')
  const paths =  JSON.parse(await(await fetch('./src/node_modules/css/index.json')).text())
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
  <section>
    <div class="btn">
      ⚙️
    </div>
    <div class="popup">
      <div class="box">
        <span class="stats">
          Entries: 
        </span>
        <button class="select">Select</button>
        <input min="0" max="100" value="75" type="range"/>
      </div>
      <div class="editor">
      </div>
    </div>
  </section>`
  const btn = shadow.querySelector('.btn')
  const popup = shadow.querySelector('.popup')
  const box = popup.querySelector('.box')
  const list = box.querySelector('.list')
  const editor = popup.querySelector('.editor')
  const stats = box.querySelector('.stats')
  const select = box.querySelector('.select')
  const slider = box.querySelector('input')

  editor.append(await theme_editor({ sid: data.sub.theme_editor, hub: [css_id], paths }))
  box.prepend(await graph_explorer({ sid: data.sub.graph_explorer, hub: [css_id] }))
  btn.onclick = () => popup.classList.toggle('active')
  select.onclick = on_select
  slider.oninput = blur
  init_css()
  return el

  async function blur(e) {
    popup.style.opacity = e.target.value/100
  }
  async function on_select () {
    list.classList.toggle('active')
    send({to: 'theme_editor', type: 'hide'})
  }
  async function get_select () {
    const inputs = list.querySelectorAll('input')
    const output = []
    inputs.forEach(el => el.checked && output.push(el.nextElementSibling.id))
    send({type: 'send', to: 'theme_editor', data: output})
  }
  async function refresh ({ data }) {
    let id = Object.keys(data).length
    const themes_id = id++
    data[themes_id] = {id: themes_id, name: 'themes', type: 'themes', sub: []}
    Object.entries(paths).forEach(entry => {
      const theme_id = id
      data[id] = {id, name: entry[0], hub: [themes_id], type: 'theme', sub: []}
      data[themes_id].sub.push(id++)
      entry[1].forEach(name => {
        data[id] = {id, name, type: 'css', local: true, hub: [theme_id]}
        data[theme_id].sub.push(id++)
      })
    })
    Object.entries(JSON.parse(localStorage.index)).forEach(entry => {
      const theme_id = id
      data[id] = {id, name: entry[0], hub: [themes_id], type: 'theme', sub: []}
      data[themes_id].sub.push(id++)
      entry[1].forEach(name => {
        data[id] = {id, name, type: 'css', hub: [theme_id]}
        data[theme_id].sub.push(id++)
      })
    })
    status.tree = data
    Object.values(data).forEach(node => {
      if(node.type === 'comp'){
        node.inputs = []
        const css = node.css || [{id: node.comp + '.css'}]
        css.forEach(async file => {
          node.inputs.push(await find_id(file.id, 'css'))
        })
        data[id] = {id, name: node.comp + '.json', type: 'json', hub: [node.id]}
        node.inputs.push(id++)
      }
    })
    console.log(data)
    status.tree = data
    stats.innerHTML = `Entries: ${Object.keys(data).length}`
    send({type: 'init', to: 'graph_explorer' , data})
  }
  async function click ({ data }) {
    if(data.type === 'css')
      send({to: 'theme_editor', type: 'init_tab', data: {id: data.name, local: data.local, hub_id: data.hub_id, theme: status.tree[data.hub[0]].name}})
    else if(data.type === 'json')
      send({ to: 'theme_editor', type: 'init', data })
    else
      return
    status.active_el && status.active_el.classList.remove('active')
    if(status.instance_id === data.id)
      editor.classList.toggle('active')
    else{
      editor.classList.add('active')
      el.classList.add('active')
    }
    status.instance_id = data.id
    status.active_el = el
  }
  async function find_id(name, type) {
    const node = Object.values(status.tree).filter(node => node.name === name && node.type === type)[0]
    return node && node.id
  }
  function make_node (instance){
    const el = document.createElement('div')
    el.classList.add('item')
    if(Object.keys(status.dirts).includes(instance.name)){
     el.classList.add('dirty')
    }
    el.innerHTML = `<main><input type='checkbox' /><span class='pre'>➕</span> <span class='name'>${instance.name || instance.id}</span> <span class='post'>➡️</span></main> <div class="sub"></div>`
    const pre_btn = el.querySelector('.pre')
    pre_btn.id = instance.id
    const post_btn = el.querySelector('.post')
    const name_el = el.querySelector('.name')
    const sub = el.querySelector('.sub')
    pre_btn.onclick = () => {
      pre_btn.innerHTML = pre_btn.innerHTML === '➕' ? '➖' : '➕'
      if(sub.children.length)
        sub.classList.toggle('hide')
      else
        sub.append(...status.tree.filter(node => node.hub == instance.id).map(make_node))
    }
    post_btn.onclick = () => {
      port.postMessage({ type: 'scroll', to: instance.id })
    }
    name_el.onclick = async () => {
      status.active_el && status.active_el.classList.remove('active')
      if(status.instance_id === instance.id)
        editor.classList.toggle('active')
      else{
        editor.classList.add('active')
        el.classList.add('active')
      }
      status.instance_id = instance.id      
      status.active_el = el
      send({to: 'theme_editor', type: 'init', data: instance })
    }
    return el
  }
  async function init_css () {
    const pref = JSON.parse(localStorage.pref)
    const pref_shared = pref[name] || data.shared || [{ id: name }]
    const pref_uniq = pref[css_id] || data.uniq || []
    pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
    pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
  async function inject_all ({ data }) {
    const sheet = new CSSStyleSheet
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets.push(sheet)
  }
  async function inject ({ data }){
    const style = document.createElement('style')
    style.innerHTML = data
    shadow.append(style)
  }
  async function get_theme ({local = true, theme = 'default', id}) {
    let theme_css
    if(local)
      theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
    else
      theme_css = JSON.parse(localStorage[theme])[id]
    return theme_css
  }
}
