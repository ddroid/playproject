const theme_editor = require('theme_editor')
/******************************************************************************
  THEME_WIDGET COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------

module.exports = theme_widget

async function theme_widget(data, port, css_id) {
  port.onmessage = onmessage
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = { tab_id: 0 }
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {}, channels: {}} // all state of instance instance
  const on_rx = {
    refresh,
    get_select,
    inject,
    inject_all,
    scroll
  }
  status.dirts = JSON.parse(localStorage.dirt || (localStorage.dirt = '{}'))
  localStorage.pref || (localStorage.pref = '{}')
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
  <section>
    <div class="btn">
      ⚙️
    </div>
    <div class="popup">
      <div class="box">
        <div class="stats">
          Instances: 
        </div>
        <button class="select">Select</button>
        <div class="list">
        </div>
      </div>
      <div class="editor">
      </div>
    </div>
  </section>`
  const btn = shadow.querySelector('.btn')
  const popup = shadow.querySelector('.popup')
  const list = popup.querySelector('.list')
  const stats = popup.querySelector('.stats')
  const editor = popup.querySelector('.editor')
  const select = popup.querySelector('.select')

  editor.append(await theme_editor(data.theme_editor, await init_ch({id: '_theme_editor', name: 'theme_editor', shared: data.theme_editor.shared, type: 'theme_editor'}), '_theme_editor'))
  btn.onclick = () => popup.classList.toggle('active')
  select.onclick = on_select
  init_css()
  return el

  async function on_select () {
    list.classList.toggle('active')
    port.postMessage({type: 'send', to_type: 'hide', to: '_theme_editor'})
  }
  async function get_select () {
    const inputs = list.querySelectorAll('input')
    const output = []
    inputs.forEach(el => el.checked && output.push(el.nextElementSibling.id))
    port.postMessage({type: 'send', to: '_theme_editor', data: output})
  }
  async function init_ch (data) {
    port.postMessage({type: 'req_ch', data })
    return new Promise(resolve => 
      port.onmessage = event => {
          resolve(event.ports[0])
          port.onmessage = onmessage
      }
    )
  }
  async function refresh ({ data }) {
    status.tree = data
    stats.innerHTML = `Instances: ${Object.keys(data).length}`
    list.append(...Object.entries(data).filter(entry => entry[1].hub === '').map(make_node))
  }
  function make_node (instance){
    const el = document.createElement('div')
    el.classList.add('item')
    if(Object.keys(status.dirts).includes(instance[1].name)){
     el.classList.add('dirty')
    }
    el.innerHTML = `<main><input type='checkbox' /><span class='pre'>➕</span> <span class='name'>${instance[1].name || instance[0]}</span> <span class='post'>➡️</span></main> <div class="sub"></div>`
    const pre_btn = el.querySelector('.pre')
    pre_btn.id = instance[0]
    const post_btn = el.querySelector('.post')
    const name_el = el.querySelector('.name')
    const sub = el.querySelector('.sub')
    pre_btn.onclick = () => {
      pre_btn.innerHTML = pre_btn.innerHTML === '➕' ? '➖' : '➕'
      if(sub.children.length)
        sub.classList.toggle('hide')
      else
        sub.append(...Object.entries(status.tree).filter(entry => entry[1].hub == instance[0]).map(make_node))
    }
    post_btn.onclick = () => {
      port.postMessage({type: 'send', to_type: 'scroll', to: instance[0]})
    }
    name_el.onclick = async () => {
      status.active_el && status.active_el.classList.remove('active')
      if(status.instance_id === instance[0])
        editor.classList.toggle('active')
      else{
        editor.classList.add('active')
        el.classList.add('active')
      }
      status.instance_id = instance[0]      
      status.active_el = el
      port.postMessage({type: 'send', to_type: 'init', to: '_theme_editor', data: {...instance[1], id:instance[0]}})
    }
    return el
  }
  async function onmessage (event) {
    on_rx[event.data.type](event.data)
  }
  async function init_css () {
    const pref = JSON.parse(localStorage.pref)
    const pref_shared = pref[name] || data.shared || []
    const pref_uniq = pref[css_id] || data.uniq || []
    pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
    pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
  async function inject_all ({ data }) {
    const sheet = new CSSStyleSheet
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets.push(sheet)
  }
  async function inject ({ data }){
    const style = document.createElement('style')
    style.innerHTML = data
    shadow.append(style)
  }
  async function get_theme ({local = true, theme = 'default', id}) {
    let theme_css
    if(local)
      theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
    else
      theme_css = JSON.parse(localStorage[theme])[name][id]
    return theme_css
  }
}
