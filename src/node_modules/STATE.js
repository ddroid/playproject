const localdb = require('localdb')
const db = localdb()
/** Data stored in a entry in db by STATE (Schema): 
 * id (String): Node Path 
 * name (String/Optional): Any (To be used theme_widget)
 * type (String): Module Name for module / Module id for instances
 * hubs (Array): List of hub-nodes
 * subs (Array): List of sub-nodes
 * inputs (Array): List of input files
 */

// Constants and initial setup (global level)
const VERSION = 9

let status = {
  root_module: true, 
  root_instance: true, 
  overrides: {},
  tree: {},
  tree_pointers: {},
  modulepaths: {},
  db
}

// Version check and initialization
status.fallback_check = Boolean(check_version())
status.fallback_check && db.add(['playproject_version'], VERSION)


// Symbol mappings
const listeners = {}
const s2i = {}
const i2s = {}
let admins = [0]

// Inner Function
function STATE (address, modulepath) {
  status.modulepaths[modulepath] = 0
  
  //Variables (module-level)
  let local_status = {
    name: extract_filename(address),
    module_id: modulepath,
    instance_ids: [],
    deny: {},
    subs: []
  }
  return statedb
  
  function statedb (fallback) {
    const fallback_module = new Function(`return ${fallback.toString()}`)()
    const {statedata, state_entries, newstatus, updated_local_status} = get_module_data(fallback_module)
    statedata.orphan && (local_status.orphan = true)
    //side effects
    if (status.fallback_check) {
      status = newstatus
      local_status = updated_local_status ? updated_local_status : local_status
      local_status.fallback_instance = statedata.api
      db.append(['state'], state_entries)
      add_source_code(statedata.inputs)
    }
    
    //Setup local data (module level)
    if(status.root_module){
      status.root_module = false
      statedata.admins && admins.push(...statedata.admins)
    }
    const sub_modules = {}
    statedata.subs && statedata.subs.forEach(id => {
      sub_modules[db.read(['state', id]).type] = id
    })
    window.STATEMODULE = status

    return {
      id: statedata.id,
      sdb: create_statedb_interface(local_status, statedata.id),
      subs: [get],
      sub_modules
    }
  }
  function get (sid) {
    const {statedata, state_entries, newstatus} = get_instance_data(sid)

    if (status.fallback_check) {
      status = newstatus
      console.log('Main instance: ', statedata.name, '\n', state_entries)
      db.append(['state'], state_entries)
    }
    local_status.subs = symbolfy(statedata, local_status)
    window.STATEMODULE = status
    
    return {
      id: statedata.id,
      sdb: create_statedb_interface(local_status, statedata.id)
    }
  }
  function get_module_data (fallback) {
    let data = db.read(['state', modulepath])

    if (status.fallback_check) {
      if (data) {
        var {sanitized_data, updated_status} = validate_and_preprocess({ fun_status: status, fallback, xtype: 'module', pre_data: data })
      } 
      else if (status.root_module) {
        status.root_module = false
        var {sanitized_data, updated_status} = validate_and_preprocess({ fun_status: status, fallback, xtype: 'module', pre_data: {id: modulepath}})
      } 
      else {

        var {sanitized_data, updated_status, updated_local_status} = find_super({ xtype: 'module', fallback, fun_status:status, local_status })
      }
      data = sanitized_data.entry
    }
    return {
      statedata: data,
      state_entries: sanitized_data?.entries,
      newstatus: updated_status,
      updated_local_status
    }
  }
  function get_instance_data (sid) {
    let id = s2i[sid]
    let data = id && db.read(['state', id])
    let sanitized_data, updated_status = status
    if (status.fallback_check) {
      if (!data && !status.root_instance) {
        ({sanitized_data, updated_status} = find_super({ xtype: 'instance', fallback: local_status.fallback_instance, fun_status: status }))
      } else {
        ({sanitized_data, updated_status} = validate_and_preprocess({
          fun_status: status,
          fallback: local_status.fallback_instance, 
          xtype: 'instance',
          pre_data: data || {id: get_instance_path(modulepath)}
        }))
      }
      data = sanitized_data.entry
    }
    else if (status.root_instance) {
      data = db.read(['state', id || get_instance_path(modulepath)])
      updated_status.tree = JSON.parse(JSON.stringify(status.tree))
      updated_status.root_instance = false
    }
    
    if (!data && local_status.orphan) {
      data = db.read(['state', get_instance_path(modulepath)])
    }
    return {
      statedata: data,
      state_entries: sanitized_data?.entries,
      newstatus: updated_status,
    }
  }
  function find_super ({ xtype, fallback, fun_status, local_status }) {
    const modulepath_parent = modulepath.split(/\/(?=[^\/]*$)/)[0]
    const split = modulepath.split('/')
    const name = split.at(-2) + '.' + split.at(-1)
    let data

    if(xtype === 'module'){
      data = db.read(['state', modulepath_parent])
      data.path = data.id = modulepath
      fun_status.tree_pointers[modulepath] = fun_status.tree_pointers[modulepath_parent]
      local_status.name = name
    }
    else{
      db.read(['state', modulepath])
      data.path = data.id = get_instance_path(modulepath)
    }
    data.name = split.at(-1)

    return { updated_local_status: local_status,
      ...validate_and_preprocess({ 
      fun_status,
      fallback, xtype, 
      pre_data: data, 
      orphan_check: true }) }
  }
  function validate_and_preprocess ({ fallback, xtype, pre_data = {}, orphan_check, fun_status }) {
    let {id: pre_id, hubs: pre_hubs} = pre_data

    validate(fallback())
    if(fun_status.overrides[pre_id]){
      fallback_data = fun_status.overrides[pre_id].fun[0](get_fallbacks({ fallback, modulename: local_status.name, modulepath, instance_path: pre_id }))
      fun_status.overrides[pre_id].by.splice(0, 1)
      fun_status.overrides[pre_id].fun.splice(0, 1)
    }
    else
      fallback_data = fallback()

    fun_status.overrides = register_overrides({ overrides: fun_status.overrides, tree: fallback_data, path: modulepath, id: pre_id })
    // console.log('overrides: ', status.overrides)
    orphan_check && (fallback_data.orphan = orphan_check)
    //This function makes changes in fun_status (side effect)
    return {
      sanitized_data: sanitize_state({ local_id: '', entry: fallback_data, path: pre_id }),
      updated_status: fun_status
    }
    
    
    function sanitize_state ({ local_id, entry, path, hub_entry, local_tree, entries = {} }) {
      [path, entry, local_tree] = extract_data({ local_id, entry, path, hub_entry, local_tree })
      
      entry.id = path
      entry.name = entry.name || local_id.split(':')[0] || local_status.name
      
      entries = {...sanitize_subs({ local_id, entry, path, local_tree })}
      
      delete entry._
      delete entry.drive
      entries[entry.id] = entry
      // console.log('Entry: ', entry)
      return {entries, entry}
    }
    function extract_data ({ local_id, entry, path, hub_entry, local_tree }) {
      if (local_id) {
        entry.hubs = [hub_entry.id]
        if (xtype === 'instance') {
          let temp_path = path.split(':')[0]
          temp_path = temp_path ? temp_path + '/' : temp_path
          const module_id = temp_path + local_id.split('$')[0]
          entry.type = module_id
          path = module_id + ':' + (status.modulepaths[module_id]++ || 0)

        } 
        else {
          entry.type = local_id
          path = path ? path + '/' : ''
          path = path + local_id
          status.tree_pointers[path] = local_tree
        }
      } 
      else {
        if (xtype === 'instance') {
          entry.type = local_status.module_id
        } else {
          local_tree = JSON.parse(JSON.stringify(entry))
          // console.log('pre_id:', pre_id)
          if (pre_id === 'page') {
            status.tree['page'] = local_tree
          } else {
            status.tree_pointers[pre_id]._[local_status.name] = local_tree
          }
          const file_id = local_status.name + '.js'
          entry.drive?.inputs || (entry.drive = {inputs: {}})
          entry.drive.inputs[file_id] = { $ref: address }
          entry.type = local_status.name
        }
        pre_hubs && (entry.hubs = pre_hubs)
      }
      return [path, entry, local_tree]
    }
    function sanitize_subs ({ local_id, entry, path, local_tree }) {
      const entries = {}
      if (!local_id) {
        if(entry._){
          entry.subs = Object.entries(entry._).map(([local_id, value]) => {
            const sub_entry = sanitize_state({ local_id, entry: value, path, hub_entry: entry, local_tree }).entry
            entries[sub_entry.id] = sub_entry
            return sub_entry.id
          })}
        if(entry.drive){
          entry.inputs = Object.entries(entry.drive.inputs).map(([key, value]) => {
            const sanitized_file = sanitize_file(key, value, entry)
            entries[sanitized_file.id] = sanitized_file
            return sanitized_file.id
          })
        }
      }
      return entries
    }
    function sanitize_file (file_id, entry, hub_entry) {
      if (!isNaN(Number(file_id))) return file_id
      
      const file = entry
      file.id = file_id
      file.name = file.name || file_id
      file.type = file.type || file.id.split('.').at(-1)
      file[file.type === 'js' ? 'subs' : 'hubs'] = [hub_entry.id]
      
      const copies = Object.keys(db.read_all(['state', file_id]))
      if (copies.length) {
        const id = copies.sort().at(-1).split(':')[1]
        file.id = file_id + ':' + (Number(id || 0) + 1)
      }
      return file
    }
  }
}

// External Function (helper)
function validate (data) {
  /**  Expected structure and types
   * Sample : "key1|key2:*:type1|type2"
   * ":" : separator
   * "|" : OR
   * "*" : Required key
   * 
   * */
  const expected_structure = {
    '_': {
      ":*": { // Required key, any name allowed
        "0": () => {}, // Optional key
      },
    },
    'drive': {
      'inputs:*': { // Required key
        ":*": { // Required key, any name allowed
          "data|link:*:object|string": {}, // data or link are names, required, object or string are types
          "link": "string"
        },
      },
    },
  };


  const errors = validate_shape(data, expected_structure)
  if (errors.length > 0) 
    console.error("Validation failed:", ...errors)

  function validate_shape (obj, expected, super_node = 'root') {
    const errors = []
    const keys = Object.keys(obj)
    const values = Object.values(obj)

    Object.entries(expected).forEach(([expected_key, expected_value]) => {
      let [expected_key_names, required, expected_types] = expected_key.split(':')
      expected_types = expected_types ? expected_types.split('|') : [typeof(expected_value)]
      let absent = true

      if(expected_key_names)
        expected_key_names.split('|').forEach(expected_key_name => {
          const value = obj[expected_key_name]

          if(value){
            const type = typeof(value)
            absent = false

            if(expected_types.includes(type))
              type === 'object' && errors.push(...validate_shape(value, expected_value, expected_key_name))
            else
              errors.push(`Type mismatch: Expected "${expected_types.join(' or ')}" got "${type}" for key "${expected_key_name}" at: `, obj)
          }
        })
      else if(required){
        values.forEach((value, index) => {
          absent = false
          const type = typeof(value)
          
          if(expected_types.includes(type))
            expected_types.includes('object') && errors.push(...validate_shape(value, expected_value, keys[index]))
          else
            errors.push(`Type mismatch: Expected "${expected_types.join(' or ')}" got "${type}" for key "${keys[index]}" at: `, obj)
        })
      }

      if(absent && required){
        if(expected_key_names)
          errors.push(`Can't find required key "${expected_key_names.replace('|', ' or ')}" at: `, obj)
        else
          errors.push(`No subs found for super key "${super_node}" at sub:`, obj)
      }
    })
    return errors
  }
}
function extract_filename (address) {
  const parts = address.split('/node_modules/')
  const last = parts.at(-1).split('/')
  return last.at(-1).slice(0, -3)
}
function get_instance_path (modulepath, modulepaths = status.modulepaths) {
  return modulepath + ':' + modulepaths[modulepath]++
}
async function get_input ({ id, name, $ref, type, data }) {
  const xtype = (typeof(id) === "number" ? name : id).split('.').at(-1)
  let result = db.read([type, id])
  
  if (!result) {
    result = data || await((await fetch($ref))[xtype === 'json' ? 'json' : 'text']())
  }
  return result
}
//Unavoidable side effect
function add_source_code (hubs) {
  hubs.forEach(async id => {
    const data = db.read(['state', id])
    if (data.type === 'js') {
      data.data = await get_input(data)
      db.add(['state', data.id], data)
      return
    }
  })
}
function symbolfy (data, local_status) {
  data.subs && data.subs.forEach(sub => {
    const substate = db.read(['state', sub])
    s2i[i2s[sub] = Symbol(sub)] = sub
    local_status.subs.push({ sid: i2s[sub], type: substate.type })
  })
  return local_status.subs
}
function register_overrides ({overrides, ...args}) {
  recurse(args)
  return overrides
  function recurse ({ tree, path = '', id, xtype = 'instance', local_modulepaths = {} }) {
    let check_override = true
    let check_sub = false
    local_modulepaths[path] = 0
    check_override = Boolean(tree[0])
    if (check_override) {
      let resultant_path = path
      if(xtype === 'instance')
        resultant_path = get_instance_path(path.split('$')[0], local_modulepaths)
      if(overrides[resultant_path]){
        overrides[resultant_path].fun.push(tree[0])
        overrides[resultant_path].by.push(id)
      }
      else
        overrides[resultant_path] = {fun: [tree[0]], by: [id]}
    }
    
    path = path ? path + '/' : path
    
    if (tree._) {
      Object.entries(tree._).forEach(([type, data]) => {
        const check = recurse({ tree: data, path: path + type.replace('.', '/'), id, xtype, local_modulepaths })
        if (!check) check_sub = true
      })
    }
    
    return !(check_override || check_sub)
  }
}
function get_fallbacks ({ fallback, modulename, modulepath, instance_path }) {
  return [default_fallback, ...status.overrides[instance_path].fun]
    
  function default_fallback () {
    const data = fallback()

    data.overrider = status.overrides[instance_path].by[0]
    merge_trees(data, modulename, modulepath)
    return data

    function merge_trees (data, type, path) {
      if (data._) {
        Object.entries(data._).forEach(([type, data]) => merge_trees(data, type, path + '/' + type.split('$')[0].replace('.', '/')))
      } else {
        type = type.split('$')[0]
        const id = db.read(['state', path]).id
        data._ = status.tree_pointers[id]?._?.[type]?._
      }
    }
  }
}
function check_version () {
  if (db.read(['playproject_version']) != VERSION) {
    localStorage.clear()
    return true
  }
}

// Public Function
function create_statedb_interface (local_status, node_id) {
  return {
    watch, get_sub, req_access
  }
  async function watch (listener) {
    const data = db.read(['state', node_id])
    listeners[data.id] = listener
    const input_map = []
    
    if (data.inputs) {
      await Promise.all(data.inputs.map(async input => {
        const input_state = db.read(['state', input])
        const input_data = await get_input(input_state)
        input_map.push({ type: input_state.type, data: [input_data] })
      }))
    }
    
    listener(input_map)
    return local_status.subs
  }
  function get_sub (type) {
    return local_status.subs.filter(sub => {
      const dad = db.read(['state', sub.type])
      return dad.type === type
    })
  }
  function req_access (sid) {
    if (local_status.deny[sid]) throw new Error('access denied')
    const el = db.read(['state', s2i[sid]])
    if (admins.includes(s2i[sid]) || admins.includes(el?.name)) {
      return {
        xget: (id) => db.read(['state', id]),
        get_all: () => db.read_all(['state']),
        add_admins: (ids) => { admins.push(...ids) },
        load: (snapshot) => {
          localStorage.clear()
          Object.entries(snapshot).forEach(([key, value]) => {
            db.add([key], JSON.parse(value), true)
          })
          window.location.reload()
        }
      }
    }
  }
}


module.exports = STATE