// STATE.js
const localdb = require('localdb')
const db = localdb()

Object.assign(STATE, { init })
const s2i = {}
const i2s = {}
const admin_list = []

module.exports = STATE

async function init (url) {
  if (!STATE.init) throw new Error('already initialized')
  STATE.init = undefined
  Object.freeze(STATE)
  const data = await (await fetch(url)).json()
  await db.add(['defaults'], data)
  const length = await db.length(['defaults'])
  i2s[0] = Symbol(0)
  for (var id = 0; id < length; id++) s2i[i2s[id] = Symbol(id)] = id
  const admin = { reset }
  return { sid: i2s[0], admin }
  async function reset () {
    await db.clear()
  }
}

function STATE () {
  const sdb = { get, add, req_access }
  const deny = {}
  return sdb

  function symbolfy(data) {
    data.sub && Object.entries(data.sub).forEach(entry =>{
      if(typeof(entry[1]) === 'object'){
        data.sub[entry[0]] = []
        entry[1].forEach(id => {
          data.sub[entry[0]].push(i2s[id])
        })
      }
      else{
        data.sub[entry[0]] = i2s[entry[1]]
      }
    })
    return data
  }
  function get (sid) {
    if (deny[sid]) throw new Error('access denied')
    const data = symbolfy(db.read(['defaults', s2i[sid]]))
    if(data.admin)
      admin_list.push(sid)
    return data
  }
  function add (opts) {
    const id = db.length()
    s2i[i2s[id] = Symbol(id)] = id
    db.add(['defaults', id], opts)
    return id
  }
  function req_access(sid) {
    if(admin_list.includes(sid))
      return { xget }
  }
  function xget(id) {
    return symbolfy(db.read(['defaults', id]))
  }
}