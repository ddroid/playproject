// STATE.js
const localdb = require('localdb')
const db = localdb()

Object.assign(STATE, { init })
const s2i = {}
const i2s = {}
var admins = [0]

module.exports = STATE

async function init (url) {
  if (!STATE.init) throw new Error('already initialized')
  STATE.init = undefined
  Object.freeze(STATE)
  let data = db.read(['state'])
  if(!data){
    const resp = await fetch(url)
    data = resp.ok && await (resp).json()
    db.add(['state'], data || {})
  }
  const length = db.length(['state'])
  for (var id = 0; id < length; id++) s2i[i2s[id] = Symbol(id)] = id
  return i2s[0]
  async function reset () {
    await db.clear()
  }
}

function STATE () {
  const sdb = { get, add, req_access }
  const deny = {}
  return sdb

  function symbolfy (data) {
    data?.sub && Object.entries(data.sub).forEach(assign)
    return data

    function assign([comp, ids]){
      if(typeof(ids) === 'object'){
        data.sub[comp] = []
        ids.forEach(id => {
          data.sub[comp].push(i2s[id])
          deny[i2s[id]] = true
        })
      }
      else{
        data.sub[comp] = i2s[ids]
        deny[i2s[ids]] = true
      }
    }
  }
  function get (sid) {
    if (deny[sid]) throw new Error('access denied')
    return symbolfy(db.read(['state', s2i[sid]]))
  }
  function add (opts, hub) {
    const id = db.length(['state'])
    s2i[i2s[id] = Symbol(id)] = id
    opts.sub = {}
    opts.id = id
    db.add(['state', id], opts)
    if(hub){
      if(!db.read(['state', hub, 'sub', opts.comp]))
        db.add(['state', hub, 'sub', opts.comp], [])
      db.push(['state', hub, 'sub', opts.comp], id)
    }
    return {id, sid: i2s[id]}
  }
  function req_access(sid) {
    if (deny[sid]) throw new Error('access denied')
    const el = db.read(['state', s2i[sid]])
    if(admins.includes(s2i[sid]) || admins.includes(el?.comp))
      return { xget, set_admins }
  }
  function xget(id) {
    return db.read(['state', id])
  }
  async function set_admins(ids) {
    admins = ids
  }
}