// STATE.js

const snapshot = null
const localdb = require('localdb')
const db = localdb()
const status = {
  root_module: true, 
  root_instance: true, 
  module_index: {}, 
  fallback_handlers: []
}
const default_slots = ['hubs', 'subs', 'inputs', 'outputs']

const version = 6
if(db.read(['playproject_version']) != version){
  localStorage.clear()
  status.fallback_check = true
  db.add(['playproject_version'], version)
}
// db.read(['state']) || db.add(['state'], {})

const listeners = {}
const s2i = {}
const i2s = {}
var admins = [0]

module.exports = STATE
function STATE(filename) {
  const parts = filename.split('/node_modules/')
  const last = parts.at(-1).split('/')
  const local_status = {
    name: last.at(-1).slice(0, -3),
    deny: {}, subs: []
  }
  const sdb = { watch, get_sub, req_access }
  const admin = { xget, get_all, add_admins }
  return statedb

  function statedb (fallback) {
    const search_filters = {'type': local_status.name}
    data = db.get_by_value(['state'], search_filters, status.module_index[local_status.name])
    if (status.fallback_check) {
      if (status.root_module) {
        status.fallback_check = !snapshot
        snapshot ? db.append(['state'], snapshot) : preprocess(fallback(), 'module', {id: 0})
        status.root_module = false
      }
      else
        preprocess(fallback(), 'module', data)
      data = db.get_by_value(['state'], search_filters, status.module_index[local_status.name])
    }
    if(data.id == 0){
      data.admins && add_admins(data.admins)
    }
    local_status.id = data.id
    local_status.module_id = data.id
    // data.hubs && add_source(data.hubs)
    const sub_modules = {}
    data.subs && data.subs.forEach(id => {
      sub_modules[db.read(['state', id]).type] = id
    })
    return { id: data.id, sdb, getdb, sub_modules }
  }
  function add_source(hubs){
    hubs.forEach(id => {
      const data = db.read(['state', id])
      if(data.type === 'js'){
        fetch_save(data)
      }
    })
  }
  function symbolfy (data){
    data.subs && data.subs.forEach(sub => {
      const substate = db.read(['state', sub])
      s2i[i2s[sub] = Symbol(sub)] = sub
      const dad = db.read(['state', substate.idx])
      local_status.subs.push({ sid: i2s[sub], type: dad.type, idx: substate.idx })
    })
  }
  function getdb (sid, fallback){
    const id = s2i[sid]
    data = db.read(['state', id])
    if(status.fallback_check){
      preprocess(fallback(), 'instance', data)
      data = db.read(['state', id])
    }
    if(status.root_instance){
      data = db.get_by_value(['state'], {'idx': 0})
      status.root_instance = false
    }
    local_status.id = data.id
    symbolfy(data)
    return {id, sdb}
  }
  async function watch (listener) {
    const data = db.read(['state', local_status.id])
    listeners[data.id] = listener
    const input_map = []
    data.inputs && await Promise.all(data.inputs.map(async input => {
      const input_state = db.read(['state', input])
      const input_data = await fetch_save(input_state)
      input_map.push({ type: input_state.type, data: [input_data] })
    }))
    listener(input_map)
    return local_status.subs
  }
  async function fetch_save({ id, name, $ref, type, data }) {
    const xtype = (typeof(id) === "number" ? name : id).split('.').at(-1)
    let result = db.read([ type, id ])
    if(!result){
      result = data || await((await fetch($ref))[xtype === 'json' ?'json' :'text']())
      db.add([type, id], result)
    }
    return result
  }
  function get_sub (type) {
    return local_status.subs.filter(sub => {
      const dad = db.read(['state', sub.idx])
      return dad.type === type
    })
  }
  async function add_admins (ids) {
    admins.push(...ids)
  }
  function req_access (sid) {
    if (local_status.deny[sid]) throw new Error('access denied')
    const el = db.read(['state', s2i[sid]])
    if(admins.includes(s2i[sid]) || admins.includes(el?.name))
      return admin
  }
  function xget (id) {
    return db.read(['state', id])
  }
  function get_all () {
    return db.read_all(['state'])
  }
  function preprocess (host_data, xtype, super_data = {}) {
    let count = db.length(['state'])
    let {id: super_id, idx, hubs, fallback, subs} = super_data
    let subs_data = {}, subs_types, id_map = {}
    if(subs){
      subs.forEach(id => subs_data[id] = db.read(['state', id]))
      subs_types = new Set(Object.values(subs_data).map(sub => {
        const dad = db.read(['state', sub.idx])
        return dad.type
      }))
    }
    fallback && Object.values(fallback).forEach(handler_id => {
      host_data = status.fallback_handlers[handler_id](host_data)
    })
    
    const on = {
      subs: clean_node,
      inputs: clean_file,
      hubs: clean_file
    }
    clean_node(0)

    function clean_node (local_id, hub_entry, hub_module) {
      let entry = host_data[local_id]
      let module

      if(xtype === 'module'){
        entry.idx = local_id || idx
        entry.type = entry.type || local_status.name
        if(!local_id){
          const file_id = local_status.name+'.js'
          host_data[file_id] = { $ref: new URL(filename, location).href }
          hubs?.push(file_id) || (hubs = [file_id])
        }
      }
      if(local_id){
        entry.hubs = [hub_entry.id]
        xtype === 'instance' && hub_module?.subs && hub_module.subs.forEach(id => {
          const module_data = db.read(['state', id])
          if(module_data.idx == entry.idx){
            entry.idx = module_data.id
            module = module_data
            return
          }
        })
        const type = entry.type || module.type
        if(subs_types && subs_types.has(type)){
          const super_entry = Object.values(subs_data).find(sub => {
            const dad = db.read(['state', sub.idx])
            return dad.type === type
          })
          console.log(xtype, type, super_entry)
          if(super_entry.fallback){
            super_entry.fallback[hub_module.type] = status.fallback_handlers.length
            status.fallback_handlers.push(entry.fallback[hub_module.type])
            db.add(['state', super_entry.id], super_entry)
          }
          return super_entry.id
        }
      }
      else{
        hubs && (entry.hubs = hubs)
        if(xtype === 'instance'){
          module = db.read(['state', local_status.module_id])
          entry.idx = module.id
        }
      }
      entry.id = local_id ? count : super_id || count
      entry.name = entry.name || entry.type || local_status.name

      if(entry.fallback){
        const new_fallback = {}
        Object.entries(entry.fallback).forEach(([type, handler]) => {
          if(handler){
            new_fallback[type] = status.fallback_handlers.length
            status.fallback_handlers.push(handler)
          }
          else
            new_fallback[type] = null
        })
        entry.fallback = new_fallback
      }
      count++
      default_slots.forEach(slot => {
        if(entry[slot] && on[slot])
          entry[slot] = entry[slot].map(id => on[slot](id, entry, module))
      })
      db.add(['state', entry.id], entry)
      return entry.id
    }
    function clean_file (file_id, hub_entry){
      if(!isNaN(Number(file_id)))
        return file_id
      const file = host_data[file_id]
      file.id = file_id
      file.name = file.name || file_id
      file.type = file.type || file.id.split('.').at(-1)
      file[file.type === 'js' ? 'subs' : 'hubs' ] = [hub_entry.id]
      db.add(['state', file_id], file)
      return file_id
    }
  }
  
}