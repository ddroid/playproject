// STATE.js

const snapshot = null
const localdb = require('localdb')
const db = localdb()
const status = {root_module: true, root_instance: true, module_index: {}}
const default_slots = ['hubs', 'subs', 'inputs', 'outputs']


if(db.read(['playproject_version']) != 5){
  localStorage.clear()
  status.fallback_check = true
  db.add(['playproject_version'], 5)
}
// db.read(['state']) || db.add(['state'], {})

const listeners = {}
const s2i = {}
const i2s = {}
var admins = [0]

module.exports = STATE
function STATE(filename) {
  const parts = filename.split('/node_modules/')
  const last = parts.at(-1).split('/')
  const local_status = {
    name: last.at(-1).slice(0, -3),
    deny: {}, subs: {}
  }
  const sdb = { watch, get_sub, req_access }
  const admin = { xget, get_all, add_admins }
  return statedb

  function statedb (fallback) {
    const search_filters = {'name': local_status.name, xtype: 'module'}
    data = db.get_by_value(['state'], search_filters, status.module_index[local_status.name])
    if (status.fallback_check) {
      if (status.root_module) {
        status.fallback_check = !snapshot
        snapshot ? db.append(['state'], snapshot) : preprocess(fallback(), 0, 'module')
        status.root_module = false
      }
      else
        preprocess(fallback(), data.id, 'module', data.hubs, data.idx)
      data = db.get_by_value(['state'], search_filters, status.module_index[local_status.name])
    }
    if(data.id == 0){
      data.admins && add_admins(data.admins)
    }
    local_status.id = data.id
    local_status.module_id = data.id
    // data.hubs && add_source(data.hubs)
    return { id: data.id, sdb, getdb }
  }
  function add_source(hubs){
    hubs.forEach(id => {
      const data = db.read(['state', id])
      if(data.type === 'js'){
        fetch_save(data)
      }
    })
  }
  function symbolfy (data){
    data.subs && data.subs.forEach(sub => {
      const substate = db.read(['state', sub])
      s2i[i2s[sub] = Symbol(sub)] = sub
      local_status.subs[substate.type]?.push({ sid: i2s[sub], type: substate.type, idx: substate.idx }) || 
      (local_status.subs[substate.type] = [{ sid: i2s[sub], type: substate.type, idx: substate.idx }])
    })
  }
  function getdb (sid, fallback){
    const id = s2i[sid]
    data = db.read(['state', id])
    if(status.fallback_check){
      preprocess(fallback(), id, 'instance', data?.hubs)
      data = db.read(['state', id])
    }
    if(status.root_instance){
      data = db.get_by_value(['state'], {'name': local_status.name, xtype: 'instance'})
      status.root_instance = false
    }
    local_status.id = data.id
    symbolfy(data)
    return {id, sdb}
  }
  async function watch (listener) {
    const data = db.read(['state', local_status.id])
    listeners[data.id] = listener
    const input_map = {}
    data.inputs && await Promise.all(data.inputs.map(async input => {
      const input_state = db.read(['state', input])
      const input_data = await fetch_save(input_state)
      input_map[input_state.type]?.push(input_data) || (input_map[input_state.type] = [input_data])
    }))
    listener(input_map)
    return local_status.subs
  }
  async function fetch_save({ id, name, file, type, data }) {
    const xtype = (typeof(id) === "number" ? name : id).split('.').at(-1)
    let result = db.read([ type, id ])
    if(!result){
      result = data || await((await fetch(file))[xtype === 'json' ?'json' :'text']())
      db.add([type, id], result)
    }
    return result
  }
  function get_sub (name) {
    return local_status.subs[name]
  }
  async function add_admins (ids) {
    admins.push(...ids)
  }
  function req_access (sid) {
    if (local_status.deny[sid]) throw new Error('access denied')
    const el = db.read(['state', s2i[sid]])
    if(admins.includes(s2i[sid]) || admins.includes(el?.name))
      return admin
  }
  function xget (id) {
    return db.read(['state', id])
  }
  function get_all () {
    return db.read_all(['state'])
  }
  function preprocess (raw_data, new_id, xtype, hubs, idx) {
    let count = db.length(['state']), module
    if(xtype === 'instance')
      module = db.read(['state', local_status.module_id])
    const on = {
      subs: clean_node,
      inputs: clean_file,
      hubs: clean_file
    }
    clean_node(0)

    function clean_node (entry_id, hub_id) {
      const entry = raw_data[entry_id]
      if(xtype === 'module'){
        entry.idx = entry_id || idx
        if(!entry_id){
          const file_id = local_status.name+'.js'
          let file = db.read(['state', filename])?.id
          if(!file){
            raw_data[file_id] = { file: filename }
            clean_file(file_id, hub_id)
          }
          hubs?.push(file_id) || (hubs = [file_id])
        }
      }
      if(entry_id){
        entry.hubs = [hub_id]
        module?.subs && module.subs.forEach(id => {
          const module_data = db.read(['state', id])
          if(module_data.idx == entry.idx){
            entry.name = module_data.name
          }
        })
      }
      else
        hubs && (entry.hubs = hubs)
      entry.id = entry_id ? count : new_id || count
      entry.name = entry.name || entry.type || local_status.name
      entry.xtype = xtype
      entry.type = entry.name
      
      count++
      default_slots.forEach(slot => {
        if(entry[slot] && on[slot])
          entry[slot] = entry[slot].map(id => on[slot](id, entry.id))
      })
      db.add(['state', entry.id], entry)
      return entry.id
    }
    function clean_file (file_id, hub_id){
      if(!isNaN(Number(file_id)))
        return file_id
      const file = raw_data[file_id]
      file.id = file_id
      file.name = file.name || file_id
      file.type = file.type || file.id.split('.').at(-1)
      file[file.type === 'js' ? 'subs' : 'hubs' ] = [hub_id]
      db.add(['state', file_id], file)
      return file_id
    }
  }
  
}





//
//DUMP
//
async function pinit (url) {
  if (!STATE.init) throw new Error('already initialized')
  STATE.init = undefined
  Object.freeze(STATE)
  let data = db.read(['state'])
  if(!data){
    const res = await fetch(url)
    data = res.ok && await (res).json()
    db.add(['state'], data || {
      "0": {
        id: "0"
      }
    })
  }
  const length = db.length(['state'])
  for (var id = 0; id < length; id++) s2i[i2s[id] = Symbol(id)] = id
  return i2s[0]
  async function reset () {
    await db.clear()
  }
}
function static () {
  const sdb = { get, req_access }
  const deny = {}
  return sdb

  function symbolfy (data) {
    data?.sub && Object.entries(data.sub).forEach(assign)
    return data

    function assign([comp, ids]){
      if(typeof(ids) === 'object'){
        data.sub[comp] = []
        ids.forEach(id => {
          data.sub[comp].push(i2s[id])
          deny[i2s[id]] = true
        })
      }
      else{
        data.sub[comp] = i2s[ids]
        deny[i2s[ids]] = true
      }
    }
  }
  async function get (sid, fallback) {
    if (deny[sid]) throw new Error('access denied')
    const id = s2i[sid]
    let xnode = db.read(['state', id])
    if(Object.keys(xnode).length < 2)
      xnode = preprocess(await fallback())[id]
    return symbolfy(xnode)
  }
  function preprocess (local_data) {
    let count = db.length(['state'])
      Object.values(local_data)[0].id = id
      local_data[id] = Object.values(local_data)[0]
      id && delete(local_data[0])

      Object.values(local_data).forEach(node => {
        node.sub && Object.entries(node.sub).forEach(([comp, list]) => {
          node.sub[comp] = []
          list.forEach(id => {
            if(Number(id) > count){
              s2i[i2s[id] = Symbol(id)] = id
              local_data[id].id = id
              node.sub[comp].push(id)
            }
            else{
              s2i[i2s[count] = Symbol(count)] = count
              local_data[count] = local_data[id] || {}
              local_data[count].id = count
              id.includes('x') && delete(local_data[id])
              node.sub[comp].push(count++)
            }
          })
        })
      })
      db.append(['state'], local_data)
      return local_data
  }
  function req_access(sid) {
    if (deny[sid]) throw new Error('access denied')
    const el = db.read(['state', s2i[sid]])
    if(admins.includes(s2i[sid]) || admins.includes(el?.comp))
      return { xget, set_admins }
  }
  function xget(id) {
    return db.read(['state', id])
  }
  async function set_admins(ids) {
    admins = ids
  }
}