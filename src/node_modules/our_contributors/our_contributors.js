const graphic = require('graphic')
const Rellax = require('rellax')
const Content = require('content')
const Contributor = require('contributor')
const IO = require('io')
const statedb = require('STATE')
const default_data = require('./data.json')
/******************************************************************************
  OUR CONTRIBUTORS COMPONENT
******************************************************************************/
// ----------------------------------------
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = our_contributors

async function our_contributors (opts) {
  // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'our_contributors'
    const status = {}
    const on = {
        inject,
        inject_all,
        scroll,
        refresh
    }
    const sdb = statedb()
    let data = sdb.get(opts.sid)
    if(!data){
      const {id, sid} = sdb.add(JSON.parse(JSON.stringify(default_data)), opts.hub)
      opts.sid = sid
      data = {...default_data, id}
    }
    const {send, css_id} = await IO({id: data.id, name, type: 'comp', comp: name, hub: opts.hub, css: data.css}, on)
    // ----------------------------------------
    // OPTS
    // ----------------------------------------
    const graphics = [
      graphic('island','./src/node_modules/assets/svg/waterfall-island.svg'),
      graphic('cloud1', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud2', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud3', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud4', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud5', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud6', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud7', './src/node_modules/assets/svg/cloud.svg'),
    ]

    const [island, cloud1, cloud2, cloud3, cloud4, cloud5, cloud6, cloud7] = await Promise.all(graphics)

    let cloud1Rellax = new Rellax( cloud1, { speed: 0.3})
    let cloud2Rellax = new Rellax( cloud2, { speed: 0.4})
    let cloud3Rellax = new Rellax( cloud3, { speed: 0.3})
    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    await refresh()
    return el

    async function refresh() {
      const xdata = sdb.get(opts.sid)
      const temp = []
      for (const sid of xdata.sub.contributor || data.sub.contributor){
          temp.push(await Contributor({sid, hub: [css_id]}))
      }
      const contributors = await Promise.all(temp)
      shadow.innerHTML = `
        <section id="ourContributors" class="section">
            <div class='inner'>
            </div>
            <div class='groups'>
            </div>
            ${cloud4.outerHTML}
            ${cloud5.outerHTML}
            ${cloud6.outerHTML}
            ${cloud7.outerHTML}
        </section>
      `
      // ----------------------------------------
      const inner = shadow.querySelector('.inner')
      const groups = shadow.querySelector('.groups')
      const main = shadow.querySelector('section')
      groups.append(...contributors.map(el => el.classList.add('group') || el))
      main.prepend(await Content({ sid: data.sub?.content?.[0], hub: [css_id] }))
      inner.append(island, cloud1, cloud2, cloud3)
      init_css()
    }
    async function init_css () {
      const pref = JSON.parse(localStorage.pref)
      const pref_shared = pref[name] || data.shared || [{ id: name }]
      const pref_uniq = pref[css_id] || data.uniq || []
      pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
      pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
    }
    async function scroll () {
      el.scrollIntoView({behavior: 'smooth'})
      el.tabIndex = '0'
      el.focus()
      el.onblur = () => {
        el.tabIndex = '-1'
        el.onblur = null
      }
    }
    async function inject_all ({ data }) {
      const sheet = new CSSStyleSheet
      sheet.replaceSync(data)
      shadow.adoptedStyleSheets.push(...shadow.adoptedStyleSheets, sheet)
    }
    async function inject ({ data }){
      const style = document.createElement('style')
      style.innerHTML = data
      shadow.append(style)
    }
    async function get_theme ({local = true, theme = 'default', id}) {
      let theme_css
      if(local)
        theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
      else
        theme_css = JSON.parse(localStorage[theme])[id]
      return theme_css
    }
}