const IO = require('io')
const graphic = require('graphic')
const statedb = require('STATE')
const default_data = require('./data.json')
/******************************************************************************
  CRYSTAL ISLAND COMPONENT
******************************************************************************/
// ----------------------------------------
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = crystal_island

async function crystal_island(opts) {
    // {date, info}, deco, island, title)
    // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'crystal_island'
    const status = {}
    const on = {
      inject,
      inject_all,
      scroll
    }
    const sdb = statedb()
    let data = sdb.get(opts.sid)
    if(!data){
      const {id} = sdb.add(default_data, opts.hub)
      data = {...default_data, id}
    }
    const {send, css_id} = await IO({id: data.id, name, type: 'comp', comp: name, hub: opts.hub, css: data.css}, on)
    // ----------------------------------------
    // OPTS
    // ----------------------------------------
    const paths = {
      island: './src/node_modules/assets/svg/floating-island3.svg',
      tree: './src/node_modules/assets/svg/big-tree.svg',
      tree1: './src/node_modules/assets/svg/single-tree1.svg',
      tree2: './src/node_modules/assets/svg/single-tree2.svg',
      tree3: './src/node_modules/assets/svg/single-tree3.svg',
      yellowCrystal: './src/node_modules/assets/svg/crystal-yellow.svg',
      purpleCrystal: './src/node_modules/assets/svg/crystal-purple.svg',
      blueCrystal: './src/node_modules/assets/svg/crystal-blue.svg',
      stone: './src/node_modules/assets/svg/stone1.svg',
      card: './src/node_modules/assets/svg/card2.svg'
    }
    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    // el.classList.add('scene')
    shadow.innerHTML = `
        <div class='deco'>
            <div class='content'>
                <h3>${data.date}</h3>
                ${ data.info === 'Coming soon' ? `<h3>${data.info}</h3>` : `<p>${data.info}</p>` }
            </div>
            ${data.title || ''}
        </div>
    `
    // ----------------------------------------
    const deco_el = shadow.querySelector('.deco')
    shadow.append(await graphic('island', paths['island']))
    deco_el.append(...await Promise.all(data.deco.map(async v => await graphic(v.includes('tree') ? 'tree' : v, paths[v]))))
    init_css()
    return el

    async function init_css () {
        const pref = JSON.parse(localStorage.pref)
        const pref_shared = pref[name] || data.shared || [{ id: name }]
        const pref_uniq = pref[css_id] || data.uniq || []
        pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
        pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
      }
      async function scroll () {
        el.scrollIntoView({behavior: 'smooth'})
        el.tabIndex = '0'
        el.focus()
        el.onblur = () => {
          el.tabIndex = '-1'
          el.onblur = null
        }
      }
      async function inject_all ({ data }) {
        const sheet = new CSSStyleSheet
        sheet.replaceSync(data)
        shadow.adoptedStyleSheets.push(sheet)
      }
      async function inject ({ data }){
        const style = document.createElement('style')
        style.innerHTML = data
        shadow.append(style)
      }
      async function get_theme ({local = true, theme = 'default', id}) {
        let theme_css
        if(local)
          theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
        else
          theme_css = JSON.parse(localStorage[theme])[id]
        return theme_css
      }
}

