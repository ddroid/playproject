const graphic = require('graphic')
const Rellax = require('rellax')
const Content = require('content')
const Contributor = require('contributor')
/******************************************************************************
  OUR CONTRIBUTORS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet()
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = our_contributors

async function our_contributors (data, port, paths) {
    // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const name = 'our_contributors'
    const id = `${ID}:${count++}` // assigns their own name
    const status = {}
    const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
    const on_rx = {
        inject
    }
    // ----------------------------------------
    // OPTS
    // ----------------------------------------
    const graphics = [
      graphic('island','./src/node_modules/assets/svg/waterfall-island.svg'),
      graphic('cloud1', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud2', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud3', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud4', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud5', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud6', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud7', './src/node_modules/assets/svg/cloud.svg'),
    ]

    const [island, cloud1, cloud2, cloud3, cloud4, cloud5, cloud6, cloud7] = await Promise.all(graphics)
    const temp = []
    for (const [index, person] of data.contributors.entries()){
        temp.push(await Contributor( person, await init_ch({ name: 'contributor', uniq: person.uniq, shared: person.shared, id: 'contributor_' + index }), 'contributor_' + index))
    }
    const contributors = await Promise.all(temp)

    let cloud1Rellax = new Rellax( cloud1, { speed: 0.3})
    let cloud2Rellax = new Rellax( cloud2, { speed: 0.4})
    let cloud3Rellax = new Rellax( cloud3, { speed: 0.3})
    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    shadow.innerHTML = `
        <section id="ourContributors" class="section">
            <div class='inner'>
            </div>

            <div class='groups'>
            </div>

            ${cloud4.outerHTML}
            ${cloud5.outerHTML}
            ${cloud6.outerHTML}
            ${cloud7.outerHTML}
        </section>
    `
    // ----------------------------------------
    const inner = shadow.querySelector('.inner')
    const groups = shadow.querySelector('.groups')
    const main = shadow.querySelector('section')
    groups.append(...contributors.map(el => el.classList.add('group') || el))
    main.prepend(await Content(data, await init_ch({ name: 'content' }), name))
    inner.append(island, cloud1, cloud2, cloud3)

    const css = await get_theme()
    inject({ data: css })
    return el

    async function init_ch (data) {
      port.postMessage({type: 'req_ch', data })
      return new Promise(resolve => 
        port.onmessage = event => {
            resolve(event.ports[0])
            port.onmessage = onmessage
        }
      )
    }
    async function onmessage ({ data }){
      on_rx[data.type](data.data)
    }
    async function inject ({ data }) {
      sheet.replaceSync(data)
      shadow.adoptedStyleSheets = [sheet]
    }
    async function get_theme () {
      const pref = JSON.parse(localStorage.pref)[name]
      let theme
      if(pref){
        if(Object.keys(localStorage).includes(pref))
          theme = JSON.parse(localStorage[pref]).css[name]
        else
          theme = await (await fetch(`./src/node_modules/css/${pref}/${name}.css`)).text()
      }
      else
        theme = await (await fetch(`./src/node_modules/css/default/${name}.css`)).text()
      return theme
    }
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}