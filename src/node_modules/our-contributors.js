const graphic = require('graphic')
const Rellax = require('rellax')
const Content = require('content')
const Contributor = require('contributor')
/******************************************************************************
  OUR CONTRIBUTORS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = our_contributors

async function our_contributors (data, port) {
    port.postMessage({data: 'Hi', type: ''})
    // ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const id = `${ID}:${count++}` // assigns their own name
    const status = {}
    const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
    const on_rx = {
        inject
    }
    status.css = get_theme()
    // ----------------------------------------
    // OPTS
    // ----------------------------------------
    const graphics = [
      graphic('island','./src/node_modules/assets/svg/waterfall-island.svg'),
      graphic('cloud1', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud2', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud3', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud4', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud5', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud6', './src/node_modules/assets/svg/cloud.svg'),
      graphic('cloud7', './src/node_modules/assets/svg/cloud.svg'),
    ]

    const [island, cloud1, cloud2, cloud3, cloud4, cloud5, cloud6, cloud7] = await Promise.all(graphics)
    const temp = []
    for (const person of data.contributors) {
        temp.push(await Contributor( person, 'group', await init_ch(person)))
    }
    const contributors = await Promise.all(temp)

    let cloud1Rellax = new Rellax( cloud1, { speed: 0.3})
    let cloud2Rellax = new Rellax( cloud2, { speed: 0.4})
    let cloud3Rellax = new Rellax( cloud3, { speed: 0.3})
    // ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    shadow.adoptedStyleSheets = [sheet]
    shadow.innerHTML = `
        <section id="ourContributors" class="section">
            <div class='inner'>
            </div>

            <div class='groups'>
            </div>

            ${cloud4.outerHTML}
            ${cloud5.outerHTML}
            ${cloud6.outerHTML}
            ${cloud7.outerHTML}
        </section>
    `
    // ----------------------------------------
    const inner = shadow.querySelector('.inner')
    const groups = shadow.querySelector('.groups')
    const main = shadow.querySelector('section')
    groups.append(...contributors)
    main.prepend(Content(data))
    inner.append(island, cloud1, cloud2, cloud3)
    return el

    async function init_ch({ name }) {
        port.postMessage({type: 'req_ch', data: name})
        return new Promise(resolve => 
            port.onmessage = event => {
                resolve(event.ports[0])
                port.onmessage = onmessage
            }
        )
    }
    async function onmessage(event) {
        on_rx[event.data.type](event.data)
    }
    async function inject({ data }) {
        const css = new CSSStyleSheet()
        status.css += data
        css.replaceSync(status.css)
        shadow.adoptedStyleSheets = [css]
    }


}
function get_theme () {
  return `
.section {
    position: relative;
    background-image: linear-gradient(0deg, var(--section5BgGEnd), var(--section5BgGMiddle), var(--section5BgGStart));
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(3, 1fr);
    padding: 5vw 2vw 10vw 2vw;
}
.content {
    position: relative;
    z-index: 9;
    grid-row-start: 1;
    grid-row-end: 2;
    grid-column-start: 3;
    text-align: center;
    padding: 0;
}
.subTitleColor {
    color: var(--section5TitleColor);
    margin: 0;
    padding: 2.5rem 0;
}
.inner {
    position: relative;
    grid-row-start: 1;
    grid-row-end: 3;
    grid-column-start: 1;
    grid-column-end: 4;
}
.island {
    position: relative;
    z-index: 10;
    width: 62%;
}
.groups {
    z-index: 9;
    grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 4;
    width: 100%;
    display: grid;
    grid-template-rows: auto;
    grid-template-columns: repeat(12, 12.5%);
    justify-self: end;
    margin-top: 20%;
}
.group {
    position: relative;
    z-index: 4;
    width: 100%;
}
.group:nth-child(4n) {
  grid-column-start: 1;
  grid-column-end: 4;
}
.group:nth-child(4n + 1) {
  grid-column-start: 5;
  grid-column-end: 8;
}
.group:nth-child(4n + 2) {
  grid-column-start: 2;
  grid-column-end: 5;
}
.group:nth-child(4n + 3) {
  grid-column-start: 6;
  grid-column-end: 9;
}

.group:nth-child(1) {
  grid-column-start: 4;
  grid-column-end: 7;
}
@media only screen and (max-width: 1024px) {
    .section {
        grid-template-columns: 1fr;
    }
    .content {
        grid-column-start: 1;
        grid-row-start: 1;
    }
    .inner {
        grid-column-start: 1;
        grid-row-start: 2;
    }
    .inner .island {
        width: 98%;
    }
    .groups {
        position: relative;
        grid-column-start: 1;
        grid-row-start: 3;
        grid-template-columns: 1fr 1fr;
        margin-top: 0;
    }
    .group{
        margin-top: 5%;
    }
    .group:nth-child(2n + 1) {
        grid-column-start: 1;
        grid-column-end: 1;
        margin-top: -35%;
    }
    .group:nth-child(2n) {
        grid-column-start: 2;
        grid-column-end: 2;
    }
}
@media only screen and (max-width: 640px) {
    .groups {
        grid-template-columns: 1fr;
    }
    .group {
        grid-column-end: 1 !important;
        width: 82%;
        margin-top: 2% !important;
        margin-left: 5%;
        grid-column-start: 1 !important;
        grid-column-end: 1 !important;
    }
    .group:nth-child(2n) {
        margin-left: 15%;
    }
}
.avatar {
    position: relative;
    z-index: 2;
}
.info {
    display: flex;
    flex-direction: column;
    justify-content: center;
    font-size: var(--contributorsTextSize);
    text-align: center;
    background-color: var(--contributorsBg);
    padding: 0% 2% 4% 20%;
    margin-left: -20%;
}
.name {
    color: var(--section5TitleColor);
    margin-top: 0;
    margin-bottom: 3%;
}
.career {
    display: block;
    color: var(--contributorsCareerColor);
}
.cloud1 {
    position: absolute;
    z-index: 2;
    width: 8vw;
    top: 10vw;
    left: 5vw;
}
.cloud2 {
    position: absolute;
    z-index: 3;
    width: 12vw;
    top: 5vw;
    left: 20vw;
}
.cloud3 {
    position: absolute;
    z-index: 4;
    width: 6vw;
    top: 15vw;
    left: 50vw;
}
.cloud4 {
    position: absolute;
    z-index: 5;
    width: 12vw;
    bottom: 12vw;
    left: 5vw;
}
.cloud5 {
    position: absolute;
    z-index: 5;
    width: 8vw;
    bottom: 5vw;
    left: 30vw;
}
.cloud6 {
    position: absolute;
    z-index: 4;
    width: 14vw;
    bottom: 0;
    right: 25vw;
}
.cloud7 {
    position: absolute;
    z-index: 3;
    width: 6vw;
    bottom: 5vw;
    right: 10vw;
}
@media only screen and (min-width: 2561px) {
    .info {
        font-size: calc(var(--contributorsTextSize) * 1.35);
    }
}
    .info {
        font-size: var(--contributorsTextSizeS);
    }
    .cloud1 {
        width: 12vw;
        top: 30vw;
    }
    .cloud2 {
        top: 22vw;
    }
    .cloud3 {
        width: 12vw;
        top: 35vw;
        left: 75vw;
    }
    .cloud4 {
        z-index: 1;
        width: 20vw;
        bottom: 40vw;
    }
    .cloud5 {
        width: 15vw;
        left: 10vw;
        bottom: 20vw;
    }
    .cloud6 {
        width: 30vw;
        bottom: 5vw;
        right: 35vw;
    }
    .cloud7 {
        width: 15vw;
        bottom: 20vw;
    }
}
@media only screen and (max-width: 414px) {
    .groups {
        width: 100%;
    }
    .cloud1 {
        top: 63vw;
    }
    .cloud2 {
        top: 56vw;
    }
    .cloud3 {
        top: 65vw;
    }
    .cloud4 {
        bottom: 30vw;
    }
    .cloud5 {
        bottom: 10vw;
    }
    .cloud6 {
        bottom: 5vw;
    }
    .cloud7 {
        bottom: 8vw;
    }
}
@media only screen and (min-width: 414px)
and (max-width: 736px) and (orientation: landscape) {
    .section {
        margin-top: -1px;
    }
    .cloud1 {
        top: 50vw;
    }
    .cloud2 {
        top: 48vw;
    }
    .cloud3 {
        top: 55vw;
    }
}
`}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
    return element => {
      const el = Object.assign(document.createElement('div'), { ...props })
      const sh = el.attachShadow(shopts)
      sh.adoptedStyleSheets = sheets
      sh.append(element)
      return el
    }
  }
  function use_protocol (petname) {
    return ({ protocol, state, on = { } }) => {
      if (petname in state.aka) throw new Error('petname already initialized')
      const { id } = state
      const invalid = on[''] || (message => console.error('invalid type', message))
      if (protocol) return handshake(protocol(Object.assign(listen, { id })))
      else return handshake
      // ----------------------------------------
      // @TODO: how to disconnect channel
      // ----------------------------------------
      function handshake (send) {
        state.aka[petname] = send.id
        const channel = state.net[send.id] = { petname, mid: 0, send, on }
        return protocol ? channel : Object.assign(listen, { id })
      }
      function listen (message) {
        const [from] = message.head
        const by = state.aka[petname]
        if (from !== by) return invalid(message) // @TODO: maybe forward
        console.log(`[${id}]:${petname}>`, message)
        const { on } = state.net[by]
        const action = on[message.type] || invalid
        action(message)
      }
    }
  }