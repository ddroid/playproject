const graphic = require('graphic')
/******************************************************************************
  OUR CONTRIBUTORS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = topnav

async function topnav(data) {
		// ----------------------------------------
    // ID + JSON STATE
    // ----------------------------------------
    const id = `${ID}:${count++}` // assigns their own name
    const status = {}
    const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
    // ----------------------------------------
    // OPTS
    // ----------------------------------------

		const playLogo = await graphic('playLogo', './src/node_modules/assets/svg/logo.svg')
		// ----------------------------------------
    // TEMPLATE
    // ----------------------------------------
    const el = document.createElement('div')
    const shadow = el.attachShadow(shopts)
    shadow.adoptedStyleSheets = [sheet]
    shadow.innerHTML = `
			<section class='topnav'>
					<a href="#top">${playLogo.outerHTML}</a>
					<nav class='menu'>
					</nav>
			</section>
		`
		// ----------------------------------------
		const menu = shadow.querySelector('.menu')
		const body = shadow.querySelector('section')
		menu.append(...data.map(make_link))
		const scrollUp = 'scrollUp'
		const scrollDown = 'scrollDown'
		let lastScroll = 0
		
		window.addEventListener('scroll', ()=> {
				if (window.innerWidth >= 1024) {
						let currentScroll = window.pageYOffset
						if (currentScroll < 1) {
								body.classList.remove(scrollUp)
								body.classList.remove(scrollDown)
								return
						}
						if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {
								body.classList.add(scrollDown)
								body.classList.remove(scrollUp)
						} else if (currentScroll < lastScroll) {
								body.classList.add(scrollUp)
								body.classList.remove(scrollDown)
						}
						lastScroll = currentScroll
				}
		})

		window.addEventListener('resize', ()=> {
				if (window.innerWidth <= 1024) {
						body.classList.remove(scrollUp)
						body.classList.remove(scrollDown)
				}
		})
		return el
		function click(url) {
			let id = document.querySelector(`#${url}`)
			console.log("@TODO: Implement scroll to specific component")
		}
		function make_link(link){
			const a = document.createElement('a')
			a.href = `#${link.url}`
			a.textContent = link.text
			a.onclick = () => click(link.url)
			return a
		}

}

function get_theme () {
  return `
.topnav {
		position: relative;
		width: 100%;
		z-index: 20;
		display: grid;
		grid-template: 1fr / auto;
		background-color: var(--playBgGStart);
		-webkit-transform: translate3d(0, 0, 0);
		transform: translate3d(0, 0, 0);
		opacity: 1;
		transition: background-color .6s, -webkit-transform .4s, transform .4s, opacity .3s linear;
}
.playLogo {
		position: absolute;
		top: 10px;
		left: 0;
		width: 15rem;
		z-index: 99;
		transition: width .6s ease-in-out;
}
.menu {
		padding: 2.5rem;
		text-align: right;
}
.menu a {
		font-size: var(--menuSize);
		margin-left: 1.75%;
		color: #575551;
		text-transform: uppercase;
		transition: color .6s linear;
		text-decoration: none;
}
.menu a:hover {
		color: #00acff;
}
.topnav.scrollUp {
		position: fixed;
		background-color: white;
		-webkit-transform: none;
		transform: none;
}
.topnav.scrollDown {
		position: fixed;
		-webkit-transform: translate3d(0, -100%, 0);
		transform: translate3d(0, -100%, 0);
		opacity: 0;
}
.scrollUp .playLogo {
		width: 10rem;
}
 .scrollDown .playLogo {
		width: 10rem;
		top: 0;
}
@media only screen and (min-width: 4096px) {
		.menu a {
				font-size: calc(var(--menuSize) * 1.5);
		}
}
@media only screen and (max-width: 1024px) {
		.playLogo  {
				width: 9vw;
				min-width: 100px;
		}
}
@media only screen and (max-width: 960px) {
		.topnav {
				position: relative;
		}
		.menu {
				padding-top: 3%;
				padding-right: 2.5vw;
		}
		.menu a {
				margin-left: 1.5%;
		}
}
@media only screen and (max-width: 812px) {
		.menu {
				display: none;
		}
		.playLogo  {
				top: 20px;
				min-width: 12vw;
		}
}
@media only screen and (max-width: 414px) {
		.playLogo  {
				min-width: 20vw;
		}
}
`}