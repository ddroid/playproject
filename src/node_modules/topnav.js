const graphic = require('graphic')
/******************************************************************************
  OUR CONTRIBUTORS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = topnav

async function topnav(data, port) {
	port.onmessage = event => inject(event.data)
	// ----------------------------------------
	// ID + JSON STATE
	// ----------------------------------------
	const id = `${ID}:${count++}` // assigns their own name
	const status = {}
	const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
	// ----------------------------------------
	// OPTS
	// ----------------------------------------

	const playLogo = await graphic('playLogo', './src/node_modules/assets/svg/logo.svg')
	// ----------------------------------------
	// TEMPLATE
	// ----------------------------------------
	const el = document.createElement('div')
	const shadow = el.attachShadow(shopts)
	shadow.adoptedStyleSheets = [sheet]
	shadow.innerHTML = `
		<section class='topnav'>
				<a href="#top">${playLogo.outerHTML}</a>
				<nav class='menu'>
				</nav>
		</section>
	`
	// ----------------------------------------
	const menu = shadow.querySelector('.menu')
	const body = shadow.querySelector('section')
	menu.append(...data.map(make_link))
	const scrollUp = 'scrollUp'
	const scrollDown = 'scrollDown'
	let lastScroll = 0
	
	window.addEventListener('scroll', ()=> {
		if (window.innerWidth >= 1024) {
			let currentScroll = window.pageYOffset
			if (currentScroll < 1) {
					body.classList.remove(scrollUp)
					body.classList.remove(scrollDown)
					return
			}
			if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {
					body.classList.add(scrollDown)
					body.classList.remove(scrollUp)
			} else if (currentScroll < lastScroll) {
					body.classList.add(scrollUp)
					body.classList.remove(scrollDown)
			}
			lastScroll = currentScroll
		}
	})

	window.addEventListener('resize', ()=> {
		if (window.innerWidth <= 1024) {
			body.classList.remove(scrollUp)
			body.classList.remove(scrollDown)
		}
	})

	const css = await get_theme()
	inject({ data: css })
	return el
	function click(url) {
		port.postMessage({ type: 'jump', data: url })
	}
	async function inject ({ data }) {
		sheet.replaceSync(data)
		shadow.adoptedStyleSheets = [sheet]
	}
	function make_link(link){
		const a = document.createElement('a')
		a.href = `#${link.url}`
		a.textContent = link.text
		a.onclick = () => click(link.url)
		return a
	}
	async function get_theme () {
		const name = 'topnav'
		const pref = JSON.parse(localStorage.pref)[name]
		let theme
		if(pref){
			if(Object.keys(localStorage).includes(pref))
				theme = JSON.parse(localStorage[pref]).css[name]
			else
				theme = await (await fetch(`./src/node_modules/css/${pref}/${name}.css`)).text()
		}
		else
			theme = await (await fetch(`./src/node_modules/css/default/${name}.css`)).text()
		return theme
	}
}
