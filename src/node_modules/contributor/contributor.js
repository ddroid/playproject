const Graphic = require('graphic')
const IO = require('io')
const statedb = require('STATE')
/******************************************************************************
  CONTRIBUTOR COMPONENT
******************************************************************************/
// ----------------------------------------
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = contributor

async function contributor (opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = 'contributor'
  const status = {}
  const lifeIsland = await Graphic('lifeIsland','./src/node_modules/assets/svg/life-island.svg')
  const on = {
    inject,
    inject_all,
    scroll
  }
  const sdb = statedb()
  const data = await sdb.get(opts.sid, fallback)
  const {send, css_id} = await IO({
    id: data.id, 
    name, 
    type: 'comp', 
    comp: name, 
    hub: opts.hub, 
    css: data.css
  }, on)  
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
    <div>
      <div class='member'>
        <img class='avatar' src=${data.avatar} alt=${data.name}>
        <div class='info'>
          <h3 class='name'>${data.name}</h3>
          ${data.careers &&
              data.careers.map( career =>
                  `<span class='career'>${career}</span>`
              )
          }
        </div>
      </div>
      ${lifeIsland.outerHTML}
    </div>
  `
  init_css()
  return el

  async function fallback() {
    return require('./data.json')
  }
  async function init_css () {
    const pref = JSON.parse(localStorage.pref)
    const pref_shared = pref[name] || data.shared || [{ id: name + '.css' }]
    const pref_uniq = pref[css_id] || data.uniq || []
    pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
    pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
  async function inject_all ({ data }) {
    const sheet = new CSSStyleSheet
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets.push(...shadow.adoptedStyleSheets, sheet)
  }
  async function inject ({ data }){
    const style = document.createElement('style')
    style.innerHTML = data
    shadow.append(style)
  }
  async function get_theme ({local = true, theme = 'default', id}) {
    let theme_css
    if(local)
      theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}`)).text()
    else
      theme_css = JSON.parse(localStorage[theme])[id]
    return theme_css
  }
}


