/******************************************************************************
  STATE
******************************************************************************/
const STATE = require('STATE')
const name = 'theme_widget'
const statedb = STATE({ modulename: name })
const shopts = { mode: 'closed' }
// ----------------------------------------
const { id, sdb, getdb } = statedb(fallback)
function fallback () { return require('./module.json') }
sdb.on({ css: css => {} })
/******************************************************************************
  THEME_WIDGET COMPONENT
******************************************************************************/
const theme_editor = require('theme_editor')
const graph_explorer = require('graph_explorer')
const IO = require('io')
// ----------------------------------------
module.exports = theme_widget

async function theme_widget (opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const { id, sdb } = await getdb(opts.sid, fallback) // hub is "parent's" io "id" to send/receive messages
  const status = { tab_id: 0, init_check: true }
  const on = {
    refresh,
    get_select,
    inject,
    scroll,
    click
  }
  const {get_all} = sdb.req_access(opts.sid)
  const send = await IO(id, name, on)

  status.dirts = JSON.parse(localStorage.dirt || (localStorage.dirt = '{}'))
  localStorage.pref || (localStorage.pref = '{}')
  const paths =  JSON.parse(await(await fetch('./src/node_modules/css/index.json')).text())
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
  <section>
    <div class="btn">
      ⚙️
    </div>
    <div class="popup">
      <div class="box">
        <span class="stats">
          Entries: 
        </span>
        <button class="select">Select</button>
        <input min="0" max="100" value="75" type="range"/>
      </div>
      <div class="editor">
      </div>
    </div>
  </section>
  <style></style>`
  const style = shadow.querySelector('style')
  const btn = shadow.querySelector('.btn')
  const popup = shadow.querySelector('.popup')
  const box = popup.querySelector('.box')
  const list = box.querySelector('.list')
  const editor = popup.querySelector('.editor')
  const stats = box.querySelector('.stats')
  const select = box.querySelector('.select')
  const slider = box.querySelector('input')

  const subs = await sdb.on({
    css: inject
  })
  editor.append(await theme_editor({ sid: subs.theme_editor?.[0], hub: [id], paths }))
  box.prepend(await graph_explorer({ sid: subs.graph_explorer?.[0], hub: [id] }))
  select.onclick = on_select
  slider.oninput = blur
  return el

  async function fallback() {
    return require('./instance.json')
  }
  async function blur(e) {
    popup.style.opacity = e.target.value/100
  }
  async function on_select () {
    list.classList.toggle('active')
    send({to: 'theme_editor', type: 'hide'})
  }
  async function get_select () {
    const inputs = list.querySelectorAll('input')
    const output = []
    inputs.forEach(el => el.checked && output.push(el.nextElementSibling.id))
    send({type: 'send', to: 'theme_editor', data: output})
  }
  async function refresh () {
    const data = get_all()
    status.tree = data
    stats.innerHTML = `Entries: ${Object.keys(data).length}`
    btn.onclick = () => {
      popup.classList.toggle('active')
      status.init_check && send({type: 'init', to: 'graph_explorer' , data:status.tree})
      status.init_check = false
    }
  }
  function dump () {
    let id = Object.keys(data).length
    const themes_id = id++
    data[themes_id] = {id: themes_id, name: 'themes', type: 'themes', sub: [], slot: [['', 'sub']]}
    Object.entries(paths).forEach(entry => {
      const theme_id = id
      data[id] = {id, name: entry[0], hubx: [themes_id], type: 'theme', subx: [], inpx: [], outx: [], slot: [['hubx', 'subx'],['inpx', 'outx']]}
      data[themes_id].sub.push(id++)
      entry[1].forEach(name => {
        data[id] = {id, name, type: 'css', local: true, hub: [theme_id], slot: [['hub']]}
        data[theme_id].inpx.push(id)
        data[theme_id].outx.push(id)
        data[theme_id].subx.push(id++)
      })
    })
    Object.entries(JSON.parse(localStorage.index)).forEach(entry => {
      const theme_id = id
      data[id] = {id, name: entry[0], hub: [themes_id], type: 'theme', sub: [], slot: [['hub', 'sub']]}
      data[themes_id].sub.push(id++)
      entry[1].forEach(name => {
        data[id] = {id, name, type: 'css', hub: [theme_id], slot: [['hub']]}
        data[theme_id].sub.push(id++)
      })
    })
    status.tree = data
    const data_id = id++
    data[data_id] = {id: data_id, name: 'data', type: 'data', sub: [], slot: [['', 'sub']]}
    Object.values(data).forEach(node => {
      if(node.type === 'comp'){
        node.input = []
        const css = node.css || [{id: node.comp + '.css'}]
        css.forEach(async file => {
          node.input.push(await find_id(file.id, 'css'))
        })
        data[id] = {id, name: node.comp + '.json', type: 'json', hub: [node.id], slot: [['hub']]}
        data[data_id].sub.push(id)
        node.input.push(id++)
      }
    })
    status.tree = data
    stats.innerHTML = `Entries: ${Object.keys(data).length}`
    btn.onclick = () => {
      popup.classList.toggle('active')
      status.init_check && send({type: 'init', to: 'graph_explorer' , data:status.tree})
      status.init_check = false
    }
  }
  async function click ({ data }) {
    if(data.type === 'css')
      send({to: 'theme_editor', type: 'init_tab', data: {id: data.name, local: data.local, hub_id: data.hub_id, theme: status.tree[data.hub[0]].name}})
    else if(data.type === 'json')
      send({ to: 'theme_editor', type: 'init', data })
    else
      return
    status.active_el && status.active_el.classList.remove('active')
    if(status.instance_id === data.id)
      editor.classList.toggle('active')
    else{
      editor.classList.add('active')
      el.classList.add('active')
    }
    status.instance_id = data.id
    status.active_el = el
  }
  async function find_id(name, type) {
    const node = Object.values(status.tree).filter(node => node.name === name && node.type === type)[0]
    return node && node.id
  }
  function make_node (instance){
    const el = document.createElement('div')
    el.classList.add('item')
    if(Object.keys(status.dirts).includes(instance.name)){
     el.classList.add('dirty')
    }
    el.innerHTML = `<main><input type='checkbox' /><span class='pre'>➕</span> <span class='name'>${instance.name || instance.id}</span> <span class='post'>➡️</span></main> <div class="sub"></div>`
    const pre_btn = el.querySelector('.pre')
    pre_btn.id = instance.id
    const post_btn = el.querySelector('.post')
    const name_el = el.querySelector('.name')
    const sub = el.querySelector('.sub')
    pre_btn.onclick = () => {
      pre_btn.innerHTML = pre_btn.innerHTML === '➕' ? '➖' : '➕'
      if(sub.children.length)
        sub.classList.toggle('hide')
      else
        sub.append(...status.tree.filter(node => node.hub == instance.id).map(make_node))
    }
    post_btn.onclick = () => {
      port.postMessage({ type: 'scroll', to: instance.id })
    }
    name_el.onclick = async () => {
      status.active_el && status.active_el.classList.remove('active')
      if(status.instance_id === instance.id)
        editor.classList.toggle('active')
      else{
        editor.classList.add('active')
        el.classList.add('active')
      }
      status.instance_id = instance.id      
      status.active_el = el
      send({to: 'theme_editor', type: 'init', data: instance })
    }
    return el
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
  async function inject (data){
    style.innerHTML = data.join('\n')
  }
}
