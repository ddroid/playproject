/******************************************************************************
  THEME_WIDGET COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------

module.exports = theme_widget

async function theme_widget(components, port) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {}, channels: {}} // all state of component instance
  status.components = components
  const on_rx = {
    refresh
  }
  port.onmessage = event => on_rx[event.data.type](event.data)

  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <section>
    <div class="btn">
      ⚙️
    </div>
    <div class="popup">
      <div class="box">
        <div class="stats">
          Active components: ${status.components.length}
        </div>
        <div class="list">
        </div>
      </div>
      <div class="editor">
          <textarea></textarea>
          <button class="inject">
            Inject
          </button>
      </div>
    </div>
  </section>`
  const btn = shadow.querySelector('.btn')
  const popup = shadow.querySelector('.popup')
  const list = shadow.querySelector('.list')
  const stats = shadow.querySelector('.stats')
  const editor = shadow.querySelector('.popup .editor')
  const inject = shadow.querySelector('.popup .editor .inject')
  const textarea = shadow.querySelector('.popup .editor textarea')

  btn.onclick = () => popup.classList.toggle('active')
  inject.onclick = () => port.postMessage({type: 'send', to_type: 'inject', to: status.active_comp, data: textarea.value})

  refresh({ data: components })
  return el

  async function refresh({ data }) {
    status.components = data
    stats.innerHTML = `Active components: ${status.components.length}`
    list.append(...status.components.map(component => {
      const el = document.createElement('div')
      el.classList.add('item')
      el.innerHTML = component
      el.onclick = () => {
        status.active_comp = component
        editor.classList.add('active')
        textarea.value = ''
      }
      return el
    }))
  }
}

function get_theme() {
  return `
  section{
    position: fixed;
    bottom: 20px;
    left: 20px;
    z-index: 50;
  }
  .btn{
    font-size: 30px;
    cursor: pointer;
  }
  .popup{
    display: none;
    position: absolute;
    bottom: 44px;
    background: #beb2d7;
    border-radius: 5px;
    gap: 10px;
  }
  .popup.active{
    display: flex;
    padding: 10px;
  }
  .popup .list{
    max-height: 60vh;
    overflow-y: scroll;
  }
  .popup .list .item{
    white-space: nowrap;
  }
  .popup .list .item:hover{
    background: #ada1c6;
  }
  .popup .editor{
    display: none;
  }
  .popup .editor.active{
    display: block;
  }
  .popup .editor textarea{
    max-height: 92%;
    min-height: 92%;
    min-width: 50vw;
  }
  `
}