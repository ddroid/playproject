const graphic = require('graphic')
const Rellax = require('rellax')
const crystal_island = require('crystal_island')
const IO = require('io')
const statedb = require('STATE')
const default_data = require('./data.json')
/******************************************************************************
  SUPPORTERS COMPONENT
******************************************************************************/
// ----------------------------------------
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = supporters

async function supporters (opts) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = 'supporters'
  const status = {}
  const on = {
      inject,
      inject_all,
      scroll
  }
  const sdb = statedb()
  const data = await sdb.get(opts.sid, fallback)
  console.log(data)
  const {send, css_id} = await IO({
    id: data.id, 
    name, 
    type: 'comp', 
    comp: name, 
    hub: opts.hub, 
    css: data.css
  }, on)

  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  let pageTitle = `<div class='title'>${data.title}</div>`
  

  const graphics = [
    graphic('cloud1', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud2', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud3', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud4', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud5', './src/node_modules/assets/svg/cloud.svg'),
    graphic('cloud6', './src/node_modules/assets/svg/cloud.svg'),
  ]

  const [cloud1, cloud2, cloud3, cloud4, cloud5, cloud6] = await Promise.all(graphics)
  
  // Parallax effects
  let cloud1Rellax = new Rellax( cloud1, { speed: 1.5})
  let cloud2Rellax = new Rellax( cloud2, { speed: 1})
  let cloud3Rellax = new Rellax( cloud3, { speed: 1.5})
  let cloud4Rellax = new Rellax( cloud4, { speed: 4})
  let cloud5Rellax = new Rellax( cloud5, { speed: 1.5})
  let cloud6Rellax = new Rellax( cloud6, { speed: 3})
  
  const scene = []
  for (const sid of data.sub.crystal_island){
    scene.push(await crystal_island({sid, hub: [css_id]}))
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.innerHTML = `
      <section id="supporters" class="section">
      </section>
  `
  // ----------------------------------------
  const main = shadow.querySelector('section')
  main.append(...(await Promise.all(scene)).map(v => v), cloud1, cloud2, cloud3, cloud4, cloud5, cloud6)
  
  // port.onmessage = onmessage
  init_css()
  return el

  async function fallback() {
    return require('./data.json')
  }
  async function init_css () {
    const pref = JSON.parse(localStorage.pref)
    const pref_shared = pref[name] || data.shared || [{ id: name }]
    const pref_uniq = pref[css_id] || data.uniq || []
    pref_shared.forEach(async v => inject_all({ data: await get_theme(v)}))
    pref_uniq.forEach(async v => inject({ data: await get_theme(v)}))
  }
  async function scroll () {
    el.scrollIntoView({behavior: 'smooth'})
    el.tabIndex = '0'
    el.focus()
    el.onblur = () => {
      el.tabIndex = '-1'
      el.onblur = null
    }
  }
  async function inject_all ({ data }) {
    const sheet = new CSSStyleSheet
    sheet.replaceSync(data)
    shadow.adoptedStyleSheets.push(sheet)
  }
  async function inject ({ data }){
    const style = document.createElement('style')
    style.innerHTML = data
    shadow.append(style)
  }
  async function get_theme ({local = true, theme = 'default', id}) {
    let theme_css
    if(local)
      theme_css = await (await fetch(`./src/node_modules/css/${theme}/${id}.css`)).text()
    else
      theme_css = JSON.parse(localStorage[theme])[id]
    return theme_css
  }
}
